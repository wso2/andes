/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.wso2.andes.thrift.slot.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-06")
public class SlotManagementService {

  public interface Iface {

    public SlotInfo getSlotInfo(String queueName, String nodeId) throws org.apache.thrift.TException;

    public long getSlotId(String queueName, String nodeId) throws org.apache.thrift.TException;

    public void updateMessageId(String queueName, String nodeId, long startMessageId, long endMessageId, long localSafeZone) throws org.apache.thrift.TException;

    public boolean deleteSlot(String queueName, long slotId, String nodeId) throws org.apache.thrift.TException;

    public void reAssignSlotWhenNoSubscribers(String nodeId, String queueName) throws org.apache.thrift.TException;

    public long updateCurrentMessageIdForSafeZone(long messageId, String nodeId) throws org.apache.thrift.TException;

    /**
     * Delete all in-memory slot associations with a given queue. This is required to handle a queue purge event.
     * 
     * @param queueName name of destination queue
     * 
     * @param queueName
     */
    public void clearAllActiveSlotRelationsToQueue(String queueName) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getSlotInfo(String queueName, String nodeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSlotId(String queueName, String nodeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateMessageId(String queueName, String nodeId, long startMessageId, long endMessageId, long localSafeZone, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteSlot(String queueName, long slotId, String nodeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reAssignSlotWhenNoSubscribers(String nodeId, String queueName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateCurrentMessageIdForSafeZone(long messageId, String nodeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void clearAllActiveSlotRelationsToQueue(String queueName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public SlotInfo getSlotInfo(String queueName, String nodeId) throws org.apache.thrift.TException
    {
      send_getSlotInfo(queueName, nodeId);
      return recv_getSlotInfo();
    }

    public void send_getSlotInfo(String queueName, String nodeId) throws org.apache.thrift.TException
    {
      getSlotInfo_args args = new getSlotInfo_args();
      args.setQueueName(queueName);
      args.setNodeId(nodeId);
      sendBase("getSlotInfo", args);
    }

    public SlotInfo recv_getSlotInfo() throws org.apache.thrift.TException
    {
      getSlotInfo_result result = new getSlotInfo_result();
      receiveBase(result, "getSlotInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSlotInfo failed: unknown result");
    }

    public long getSlotId(String queueName, String nodeId) throws org.apache.thrift.TException
    {
      send_getSlotId(queueName, nodeId);
      return recv_getSlotId();
    }

    public void send_getSlotId(String queueName, String nodeId) throws org.apache.thrift.TException
    {
      getSlotId_args args = new getSlotId_args();
      args.setQueueName(queueName);
      args.setNodeId(nodeId);
      sendBase("getSlotId", args);
    }

    public long recv_getSlotId() throws org.apache.thrift.TException
    {
      getSlotId_result result = new getSlotId_result();
      receiveBase(result, "getSlotId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSlotId failed: unknown result");
    }

    public void updateMessageId(String queueName, String nodeId, long startMessageId, long endMessageId, long localSafeZone) throws org.apache.thrift.TException
    {
      send_updateMessageId(queueName, nodeId, startMessageId, endMessageId, localSafeZone);
      recv_updateMessageId();
    }

    public void send_updateMessageId(String queueName, String nodeId, long startMessageId, long endMessageId, long localSafeZone) throws org.apache.thrift.TException
    {
      updateMessageId_args args = new updateMessageId_args();
      args.setQueueName(queueName);
      args.setNodeId(nodeId);
      args.setStartMessageId(startMessageId);
      args.setEndMessageId(endMessageId);
      args.setLocalSafeZone(localSafeZone);
      sendBase("updateMessageId", args);
    }

    public void recv_updateMessageId() throws org.apache.thrift.TException
    {
      updateMessageId_result result = new updateMessageId_result();
      receiveBase(result, "updateMessageId");
      return;
    }

    public boolean deleteSlot(String queueName, long slotId, String nodeId) throws org.apache.thrift.TException
    {
      send_deleteSlot(queueName, slotId, nodeId);
      return recv_deleteSlot();
    }

    public void send_deleteSlot(String queueName, long slotId, String nodeId) throws org.apache.thrift.TException
    {
      deleteSlot_args args = new deleteSlot_args();
      args.setQueueName(queueName);
      args.setSlotId(slotId);
      args.setNodeId(nodeId);
      sendBase("deleteSlot", args);
    }

    public boolean recv_deleteSlot() throws org.apache.thrift.TException
    {
      deleteSlot_result result = new deleteSlot_result();
      receiveBase(result, "deleteSlot");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteSlot failed: unknown result");
    }

    public void reAssignSlotWhenNoSubscribers(String nodeId, String queueName) throws org.apache.thrift.TException
    {
      send_reAssignSlotWhenNoSubscribers(nodeId, queueName);
      recv_reAssignSlotWhenNoSubscribers();
    }

    public void send_reAssignSlotWhenNoSubscribers(String nodeId, String queueName) throws org.apache.thrift.TException
    {
      reAssignSlotWhenNoSubscribers_args args = new reAssignSlotWhenNoSubscribers_args();
      args.setNodeId(nodeId);
      args.setQueueName(queueName);
      sendBase("reAssignSlotWhenNoSubscribers", args);
    }

    public void recv_reAssignSlotWhenNoSubscribers() throws org.apache.thrift.TException
    {
      reAssignSlotWhenNoSubscribers_result result = new reAssignSlotWhenNoSubscribers_result();
      receiveBase(result, "reAssignSlotWhenNoSubscribers");
      return;
    }

    public long updateCurrentMessageIdForSafeZone(long messageId, String nodeId) throws org.apache.thrift.TException
    {
      send_updateCurrentMessageIdForSafeZone(messageId, nodeId);
      return recv_updateCurrentMessageIdForSafeZone();
    }

    public void send_updateCurrentMessageIdForSafeZone(long messageId, String nodeId) throws org.apache.thrift.TException
    {
      updateCurrentMessageIdForSafeZone_args args = new updateCurrentMessageIdForSafeZone_args();
      args.setMessageId(messageId);
      args.setNodeId(nodeId);
      sendBase("updateCurrentMessageIdForSafeZone", args);
    }

    public long recv_updateCurrentMessageIdForSafeZone() throws org.apache.thrift.TException
    {
      updateCurrentMessageIdForSafeZone_result result = new updateCurrentMessageIdForSafeZone_result();
      receiveBase(result, "updateCurrentMessageIdForSafeZone");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateCurrentMessageIdForSafeZone failed: unknown result");
    }

    public void clearAllActiveSlotRelationsToQueue(String queueName) throws org.apache.thrift.TException
    {
      send_clearAllActiveSlotRelationsToQueue(queueName);
      recv_clearAllActiveSlotRelationsToQueue();
    }

    public void send_clearAllActiveSlotRelationsToQueue(String queueName) throws org.apache.thrift.TException
    {
      clearAllActiveSlotRelationsToQueue_args args = new clearAllActiveSlotRelationsToQueue_args();
      args.setQueueName(queueName);
      sendBase("clearAllActiveSlotRelationsToQueue", args);
    }

    public void recv_clearAllActiveSlotRelationsToQueue() throws org.apache.thrift.TException
    {
      clearAllActiveSlotRelationsToQueue_result result = new clearAllActiveSlotRelationsToQueue_result();
      receiveBase(result, "clearAllActiveSlotRelationsToQueue");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getSlotInfo(String queueName, String nodeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSlotInfo_call method_call = new getSlotInfo_call(queueName, nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSlotInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String queueName;
      private String nodeId;
      public getSlotInfo_call(String queueName, String nodeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.queueName = queueName;
        this.nodeId = nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSlotInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSlotInfo_args args = new getSlotInfo_args();
        args.setQueueName(queueName);
        args.setNodeId(nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SlotInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSlotInfo();
      }
    }

    public void getSlotId(String queueName, String nodeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSlotId_call method_call = new getSlotId_call(queueName, nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSlotId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String queueName;
      private String nodeId;
      public getSlotId_call(String queueName, String nodeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.queueName = queueName;
        this.nodeId = nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSlotId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSlotId_args args = new getSlotId_args();
        args.setQueueName(queueName);
        args.setNodeId(nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSlotId();
      }
    }

    public void updateMessageId(String queueName, String nodeId, long startMessageId, long endMessageId, long localSafeZone, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateMessageId_call method_call = new updateMessageId_call(queueName, nodeId, startMessageId, endMessageId, localSafeZone, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateMessageId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String queueName;
      private String nodeId;
      private long startMessageId;
      private long endMessageId;
      private long localSafeZone;
      public updateMessageId_call(String queueName, String nodeId, long startMessageId, long endMessageId, long localSafeZone, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.queueName = queueName;
        this.nodeId = nodeId;
        this.startMessageId = startMessageId;
        this.endMessageId = endMessageId;
        this.localSafeZone = localSafeZone;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateMessageId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateMessageId_args args = new updateMessageId_args();
        args.setQueueName(queueName);
        args.setNodeId(nodeId);
        args.setStartMessageId(startMessageId);
        args.setEndMessageId(endMessageId);
        args.setLocalSafeZone(localSafeZone);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateMessageId();
      }
    }

    public void deleteSlot(String queueName, long slotId, String nodeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteSlot_call method_call = new deleteSlot_call(queueName, slotId, nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteSlot_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String queueName;
      private long slotId;
      private String nodeId;
      public deleteSlot_call(String queueName, long slotId, String nodeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.queueName = queueName;
        this.slotId = slotId;
        this.nodeId = nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteSlot", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteSlot_args args = new deleteSlot_args();
        args.setQueueName(queueName);
        args.setSlotId(slotId);
        args.setNodeId(nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteSlot();
      }
    }

    public void reAssignSlotWhenNoSubscribers(String nodeId, String queueName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reAssignSlotWhenNoSubscribers_call method_call = new reAssignSlotWhenNoSubscribers_call(nodeId, queueName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reAssignSlotWhenNoSubscribers_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String nodeId;
      private String queueName;
      public reAssignSlotWhenNoSubscribers_call(String nodeId, String queueName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeId = nodeId;
        this.queueName = queueName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reAssignSlotWhenNoSubscribers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reAssignSlotWhenNoSubscribers_args args = new reAssignSlotWhenNoSubscribers_args();
        args.setNodeId(nodeId);
        args.setQueueName(queueName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_reAssignSlotWhenNoSubscribers();
      }
    }

    public void updateCurrentMessageIdForSafeZone(long messageId, String nodeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateCurrentMessageIdForSafeZone_call method_call = new updateCurrentMessageIdForSafeZone_call(messageId, nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateCurrentMessageIdForSafeZone_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long messageId;
      private String nodeId;
      public updateCurrentMessageIdForSafeZone_call(long messageId, String nodeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.messageId = messageId;
        this.nodeId = nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCurrentMessageIdForSafeZone", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateCurrentMessageIdForSafeZone_args args = new updateCurrentMessageIdForSafeZone_args();
        args.setMessageId(messageId);
        args.setNodeId(nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateCurrentMessageIdForSafeZone();
      }
    }

    public void clearAllActiveSlotRelationsToQueue(String queueName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      clearAllActiveSlotRelationsToQueue_call method_call = new clearAllActiveSlotRelationsToQueue_call(queueName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class clearAllActiveSlotRelationsToQueue_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String queueName;
      public clearAllActiveSlotRelationsToQueue_call(String queueName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.queueName = queueName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("clearAllActiveSlotRelationsToQueue", org.apache.thrift.protocol.TMessageType.CALL, 0));
        clearAllActiveSlotRelationsToQueue_args args = new clearAllActiveSlotRelationsToQueue_args();
        args.setQueueName(queueName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_clearAllActiveSlotRelationsToQueue();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getSlotInfo", new getSlotInfo());
      processMap.put("getSlotId", new getSlotId());
      processMap.put("updateMessageId", new updateMessageId());
      processMap.put("deleteSlot", new deleteSlot());
      processMap.put("reAssignSlotWhenNoSubscribers", new reAssignSlotWhenNoSubscribers());
      processMap.put("updateCurrentMessageIdForSafeZone", new updateCurrentMessageIdForSafeZone());
      processMap.put("clearAllActiveSlotRelationsToQueue", new clearAllActiveSlotRelationsToQueue());
      return processMap;
    }

    public static class getSlotInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSlotInfo_args> {
      public getSlotInfo() {
        super("getSlotInfo");
      }

      public getSlotInfo_args getEmptyArgsInstance() {
        return new getSlotInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSlotInfo_result getResult(I iface, getSlotInfo_args args) throws org.apache.thrift.TException {
        getSlotInfo_result result = new getSlotInfo_result();
        result.success = iface.getSlotInfo(args.queueName, args.nodeId);
        return result;
      }
    }

    public static class getSlotId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSlotId_args> {
      public getSlotId() {
        super("getSlotId");
      }

      public getSlotId_args getEmptyArgsInstance() {
        return new getSlotId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSlotId_result getResult(I iface, getSlotId_args args) throws org.apache.thrift.TException {
        getSlotId_result result = new getSlotId_result();
        result.success = iface.getSlotId(args.queueName, args.nodeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateMessageId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateMessageId_args> {
      public updateMessageId() {
        super("updateMessageId");
      }

      public updateMessageId_args getEmptyArgsInstance() {
        return new updateMessageId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateMessageId_result getResult(I iface, updateMessageId_args args) throws org.apache.thrift.TException {
        updateMessageId_result result = new updateMessageId_result();
        iface.updateMessageId(args.queueName, args.nodeId, args.startMessageId, args.endMessageId, args.localSafeZone);
        return result;
      }
    }

    public static class deleteSlot<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteSlot_args> {
      public deleteSlot() {
        super("deleteSlot");
      }

      public deleteSlot_args getEmptyArgsInstance() {
        return new deleteSlot_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteSlot_result getResult(I iface, deleteSlot_args args) throws org.apache.thrift.TException {
        deleteSlot_result result = new deleteSlot_result();
        result.success = iface.deleteSlot(args.queueName, args.slotId, args.nodeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reAssignSlotWhenNoSubscribers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reAssignSlotWhenNoSubscribers_args> {
      public reAssignSlotWhenNoSubscribers() {
        super("reAssignSlotWhenNoSubscribers");
      }

      public reAssignSlotWhenNoSubscribers_args getEmptyArgsInstance() {
        return new reAssignSlotWhenNoSubscribers_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reAssignSlotWhenNoSubscribers_result getResult(I iface, reAssignSlotWhenNoSubscribers_args args) throws org.apache.thrift.TException {
        reAssignSlotWhenNoSubscribers_result result = new reAssignSlotWhenNoSubscribers_result();
        iface.reAssignSlotWhenNoSubscribers(args.nodeId, args.queueName);
        return result;
      }
    }

    public static class updateCurrentMessageIdForSafeZone<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCurrentMessageIdForSafeZone_args> {
      public updateCurrentMessageIdForSafeZone() {
        super("updateCurrentMessageIdForSafeZone");
      }

      public updateCurrentMessageIdForSafeZone_args getEmptyArgsInstance() {
        return new updateCurrentMessageIdForSafeZone_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateCurrentMessageIdForSafeZone_result getResult(I iface, updateCurrentMessageIdForSafeZone_args args) throws org.apache.thrift.TException {
        updateCurrentMessageIdForSafeZone_result result = new updateCurrentMessageIdForSafeZone_result();
        result.success = iface.updateCurrentMessageIdForSafeZone(args.messageId, args.nodeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class clearAllActiveSlotRelationsToQueue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, clearAllActiveSlotRelationsToQueue_args> {
      public clearAllActiveSlotRelationsToQueue() {
        super("clearAllActiveSlotRelationsToQueue");
      }

      public clearAllActiveSlotRelationsToQueue_args getEmptyArgsInstance() {
        return new clearAllActiveSlotRelationsToQueue_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public clearAllActiveSlotRelationsToQueue_result getResult(I iface, clearAllActiveSlotRelationsToQueue_args args) throws org.apache.thrift.TException {
        clearAllActiveSlotRelationsToQueue_result result = new clearAllActiveSlotRelationsToQueue_result();
        iface.clearAllActiveSlotRelationsToQueue(args.queueName);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getSlotInfo", new getSlotInfo());
      processMap.put("getSlotId", new getSlotId());
      processMap.put("updateMessageId", new updateMessageId());
      processMap.put("deleteSlot", new deleteSlot());
      processMap.put("reAssignSlotWhenNoSubscribers", new reAssignSlotWhenNoSubscribers());
      processMap.put("updateCurrentMessageIdForSafeZone", new updateCurrentMessageIdForSafeZone());
      processMap.put("clearAllActiveSlotRelationsToQueue", new clearAllActiveSlotRelationsToQueue());
      return processMap;
    }

    public static class getSlotInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSlotInfo_args, SlotInfo> {
      public getSlotInfo() {
        super("getSlotInfo");
      }

      public getSlotInfo_args getEmptyArgsInstance() {
        return new getSlotInfo_args();
      }

      public AsyncMethodCallback<SlotInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<SlotInfo>() { 
          public void onComplete(SlotInfo o) {
            getSlotInfo_result result = new getSlotInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSlotInfo_result result = new getSlotInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSlotInfo_args args, org.apache.thrift.async.AsyncMethodCallback<SlotInfo> resultHandler) throws TException {
        iface.getSlotInfo(args.queueName, args.nodeId,resultHandler);
      }
    }

    public static class getSlotId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSlotId_args, Long> {
      public getSlotId() {
        super("getSlotId");
      }

      public getSlotId_args getEmptyArgsInstance() {
        return new getSlotId_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getSlotId_result result = new getSlotId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSlotId_result result = new getSlotId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSlotId_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getSlotId(args.queueName, args.nodeId,resultHandler);
      }
    }

    public static class updateMessageId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateMessageId_args, Void> {
      public updateMessageId() {
        super("updateMessageId");
      }

      public updateMessageId_args getEmptyArgsInstance() {
        return new updateMessageId_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateMessageId_result result = new updateMessageId_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateMessageId_result result = new updateMessageId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateMessageId_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateMessageId(args.queueName, args.nodeId, args.startMessageId, args.endMessageId, args.localSafeZone,resultHandler);
      }
    }

    public static class deleteSlot<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteSlot_args, Boolean> {
      public deleteSlot() {
        super("deleteSlot");
      }

      public deleteSlot_args getEmptyArgsInstance() {
        return new deleteSlot_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteSlot_result result = new deleteSlot_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteSlot_result result = new deleteSlot_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteSlot_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteSlot(args.queueName, args.slotId, args.nodeId,resultHandler);
      }
    }

    public static class reAssignSlotWhenNoSubscribers<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reAssignSlotWhenNoSubscribers_args, Void> {
      public reAssignSlotWhenNoSubscribers() {
        super("reAssignSlotWhenNoSubscribers");
      }

      public reAssignSlotWhenNoSubscribers_args getEmptyArgsInstance() {
        return new reAssignSlotWhenNoSubscribers_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            reAssignSlotWhenNoSubscribers_result result = new reAssignSlotWhenNoSubscribers_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reAssignSlotWhenNoSubscribers_result result = new reAssignSlotWhenNoSubscribers_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reAssignSlotWhenNoSubscribers_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.reAssignSlotWhenNoSubscribers(args.nodeId, args.queueName,resultHandler);
      }
    }

    public static class updateCurrentMessageIdForSafeZone<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateCurrentMessageIdForSafeZone_args, Long> {
      public updateCurrentMessageIdForSafeZone() {
        super("updateCurrentMessageIdForSafeZone");
      }

      public updateCurrentMessageIdForSafeZone_args getEmptyArgsInstance() {
        return new updateCurrentMessageIdForSafeZone_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            updateCurrentMessageIdForSafeZone_result result = new updateCurrentMessageIdForSafeZone_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateCurrentMessageIdForSafeZone_result result = new updateCurrentMessageIdForSafeZone_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateCurrentMessageIdForSafeZone_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.updateCurrentMessageIdForSafeZone(args.messageId, args.nodeId,resultHandler);
      }
    }

    public static class clearAllActiveSlotRelationsToQueue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, clearAllActiveSlotRelationsToQueue_args, Void> {
      public clearAllActiveSlotRelationsToQueue() {
        super("clearAllActiveSlotRelationsToQueue");
      }

      public clearAllActiveSlotRelationsToQueue_args getEmptyArgsInstance() {
        return new clearAllActiveSlotRelationsToQueue_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            clearAllActiveSlotRelationsToQueue_result result = new clearAllActiveSlotRelationsToQueue_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            clearAllActiveSlotRelationsToQueue_result result = new clearAllActiveSlotRelationsToQueue_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, clearAllActiveSlotRelationsToQueue_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.clearAllActiveSlotRelationsToQueue(args.queueName,resultHandler);
      }
    }

  }

  public static class getSlotInfo_args implements org.apache.thrift.TBase<getSlotInfo_args, getSlotInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSlotInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSlotInfo_args");

    private static final org.apache.thrift.protocol.TField QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queueName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSlotInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSlotInfo_argsTupleSchemeFactory());
    }

    public String queueName; // required
    public String nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUEUE_NAME((short)1, "queueName"),
      NODE_ID((short)2, "nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUEUE_NAME
            return QUEUE_NAME;
          case 2: // NODE_ID
            return NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("queueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSlotInfo_args.class, metaDataMap);
    }

    public getSlotInfo_args() {
    }

    public getSlotInfo_args(
      String queueName,
      String nodeId)
    {
      this();
      this.queueName = queueName;
      this.nodeId = nodeId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSlotInfo_args(getSlotInfo_args other) {
      if (other.isSetQueueName()) {
        this.queueName = other.queueName;
      }
      if (other.isSetNodeId()) {
        this.nodeId = other.nodeId;
      }
    }

    public getSlotInfo_args deepCopy() {
      return new getSlotInfo_args(this);
    }

    @Override
    public void clear() {
      this.queueName = null;
      this.nodeId = null;
    }

    public String getQueueName() {
      return this.queueName;
    }

    public getSlotInfo_args setQueueName(String queueName) {
      this.queueName = queueName;
      return this;
    }

    public void unsetQueueName() {
      this.queueName = null;
    }

    /** Returns true if field queueName is set (has been assigned a value) and false otherwise */
    public boolean isSetQueueName() {
      return this.queueName != null;
    }

    public void setQueueNameIsSet(boolean value) {
      if (!value) {
        this.queueName = null;
      }
    }

    public String getNodeId() {
      return this.nodeId;
    }

    public getSlotInfo_args setNodeId(String nodeId) {
      this.nodeId = nodeId;
      return this;
    }

    public void unsetNodeId() {
      this.nodeId = null;
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return this.nodeId != null;
    }

    public void setNodeIdIsSet(boolean value) {
      if (!value) {
        this.nodeId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUEUE_NAME:
        if (value == null) {
          unsetQueueName();
        } else {
          setQueueName((String)value);
        }
        break;

      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUEUE_NAME:
        return getQueueName();

      case NODE_ID:
        return getNodeId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUEUE_NAME:
        return isSetQueueName();
      case NODE_ID:
        return isSetNodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSlotInfo_args)
        return this.equals((getSlotInfo_args)that);
      return false;
    }

    public boolean equals(getSlotInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_queueName = true && this.isSetQueueName();
      boolean that_present_queueName = true && that.isSetQueueName();
      if (this_present_queueName || that_present_queueName) {
        if (!(this_present_queueName && that_present_queueName))
          return false;
        if (!this.queueName.equals(that.queueName))
          return false;
      }

      boolean this_present_nodeId = true && this.isSetNodeId();
      boolean that_present_nodeId = true && that.isSetNodeId();
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (!this.nodeId.equals(that.nodeId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_queueName = true && (isSetQueueName());
      list.add(present_queueName);
      if (present_queueName)
        list.add(queueName);

      boolean present_nodeId = true && (isSetNodeId());
      list.add(present_nodeId);
      if (present_nodeId)
        list.add(nodeId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSlotInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQueueName()).compareTo(other.isSetQueueName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueueName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueName, other.queueName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSlotInfo_args(");
      boolean first = true;

      sb.append("queueName:");
      if (this.queueName == null) {
        sb.append("null");
      } else {
        sb.append(this.queueName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeId:");
      if (this.nodeId == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSlotInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getSlotInfo_argsStandardScheme getScheme() {
        return new getSlotInfo_argsStandardScheme();
      }
    }

    private static class getSlotInfo_argsStandardScheme extends StandardScheme<getSlotInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSlotInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUEUE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.queueName = iprot.readString();
                struct.setQueueNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeId = iprot.readString();
                struct.setNodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSlotInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.queueName != null) {
          oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
          oprot.writeString(struct.queueName);
          oprot.writeFieldEnd();
        }
        if (struct.nodeId != null) {
          oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
          oprot.writeString(struct.nodeId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSlotInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getSlotInfo_argsTupleScheme getScheme() {
        return new getSlotInfo_argsTupleScheme();
      }
    }

    private static class getSlotInfo_argsTupleScheme extends TupleScheme<getSlotInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSlotInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQueueName()) {
          optionals.set(0);
        }
        if (struct.isSetNodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQueueName()) {
          oprot.writeString(struct.queueName);
        }
        if (struct.isSetNodeId()) {
          oprot.writeString(struct.nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSlotInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.queueName = iprot.readString();
          struct.setQueueNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nodeId = iprot.readString();
          struct.setNodeIdIsSet(true);
        }
      }
    }

  }

  public static class getSlotInfo_result implements org.apache.thrift.TBase<getSlotInfo_result, getSlotInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSlotInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSlotInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSlotInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSlotInfo_resultTupleSchemeFactory());
    }

    public SlotInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SlotInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSlotInfo_result.class, metaDataMap);
    }

    public getSlotInfo_result() {
    }

    public getSlotInfo_result(
      SlotInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSlotInfo_result(getSlotInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new SlotInfo(other.success);
      }
    }

    public getSlotInfo_result deepCopy() {
      return new getSlotInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public SlotInfo getSuccess() {
      return this.success;
    }

    public getSlotInfo_result setSuccess(SlotInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SlotInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSlotInfo_result)
        return this.equals((getSlotInfo_result)that);
      return false;
    }

    public boolean equals(getSlotInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSlotInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSlotInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSlotInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getSlotInfo_resultStandardScheme getScheme() {
        return new getSlotInfo_resultStandardScheme();
      }
    }

    private static class getSlotInfo_resultStandardScheme extends StandardScheme<getSlotInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSlotInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SlotInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSlotInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSlotInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getSlotInfo_resultTupleScheme getScheme() {
        return new getSlotInfo_resultTupleScheme();
      }
    }

    private static class getSlotInfo_resultTupleScheme extends TupleScheme<getSlotInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSlotInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSlotInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new SlotInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSlotId_args implements org.apache.thrift.TBase<getSlotId_args, getSlotId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSlotId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSlotId_args");

    private static final org.apache.thrift.protocol.TField QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queueName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSlotId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSlotId_argsTupleSchemeFactory());
    }

    public String queueName; // required
    public String nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUEUE_NAME((short)1, "queueName"),
      NODE_ID((short)2, "nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUEUE_NAME
            return QUEUE_NAME;
          case 2: // NODE_ID
            return NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("queueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSlotId_args.class, metaDataMap);
    }

    public getSlotId_args() {
    }

    public getSlotId_args(
      String queueName,
      String nodeId)
    {
      this();
      this.queueName = queueName;
      this.nodeId = nodeId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSlotId_args(getSlotId_args other) {
      if (other.isSetQueueName()) {
        this.queueName = other.queueName;
      }
      if (other.isSetNodeId()) {
        this.nodeId = other.nodeId;
      }
    }

    public getSlotId_args deepCopy() {
      return new getSlotId_args(this);
    }

    @Override
    public void clear() {
      this.queueName = null;
      this.nodeId = null;
    }

    public String getQueueName() {
      return this.queueName;
    }

    public getSlotId_args setQueueName(String queueName) {
      this.queueName = queueName;
      return this;
    }

    public void unsetQueueName() {
      this.queueName = null;
    }

    /** Returns true if field queueName is set (has been assigned a value) and false otherwise */
    public boolean isSetQueueName() {
      return this.queueName != null;
    }

    public void setQueueNameIsSet(boolean value) {
      if (!value) {
        this.queueName = null;
      }
    }

    public String getNodeId() {
      return this.nodeId;
    }

    public getSlotId_args setNodeId(String nodeId) {
      this.nodeId = nodeId;
      return this;
    }

    public void unsetNodeId() {
      this.nodeId = null;
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return this.nodeId != null;
    }

    public void setNodeIdIsSet(boolean value) {
      if (!value) {
        this.nodeId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUEUE_NAME:
        if (value == null) {
          unsetQueueName();
        } else {
          setQueueName((String)value);
        }
        break;

      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUEUE_NAME:
        return getQueueName();

      case NODE_ID:
        return getNodeId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUEUE_NAME:
        return isSetQueueName();
      case NODE_ID:
        return isSetNodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSlotId_args)
        return this.equals((getSlotId_args)that);
      return false;
    }

    public boolean equals(getSlotId_args that) {
      if (that == null)
        return false;

      boolean this_present_queueName = true && this.isSetQueueName();
      boolean that_present_queueName = true && that.isSetQueueName();
      if (this_present_queueName || that_present_queueName) {
        if (!(this_present_queueName && that_present_queueName))
          return false;
        if (!this.queueName.equals(that.queueName))
          return false;
      }

      boolean this_present_nodeId = true && this.isSetNodeId();
      boolean that_present_nodeId = true && that.isSetNodeId();
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (!this.nodeId.equals(that.nodeId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_queueName = true && (isSetQueueName());
      list.add(present_queueName);
      if (present_queueName)
        list.add(queueName);

      boolean present_nodeId = true && (isSetNodeId());
      list.add(present_nodeId);
      if (present_nodeId)
        list.add(nodeId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSlotId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQueueName()).compareTo(other.isSetQueueName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueueName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueName, other.queueName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSlotId_args(");
      boolean first = true;

      sb.append("queueName:");
      if (this.queueName == null) {
        sb.append("null");
      } else {
        sb.append(this.queueName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeId:");
      if (this.nodeId == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSlotId_argsStandardSchemeFactory implements SchemeFactory {
      public getSlotId_argsStandardScheme getScheme() {
        return new getSlotId_argsStandardScheme();
      }
    }

    private static class getSlotId_argsStandardScheme extends StandardScheme<getSlotId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSlotId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUEUE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.queueName = iprot.readString();
                struct.setQueueNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeId = iprot.readString();
                struct.setNodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSlotId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.queueName != null) {
          oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
          oprot.writeString(struct.queueName);
          oprot.writeFieldEnd();
        }
        if (struct.nodeId != null) {
          oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
          oprot.writeString(struct.nodeId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSlotId_argsTupleSchemeFactory implements SchemeFactory {
      public getSlotId_argsTupleScheme getScheme() {
        return new getSlotId_argsTupleScheme();
      }
    }

    private static class getSlotId_argsTupleScheme extends TupleScheme<getSlotId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSlotId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQueueName()) {
          optionals.set(0);
        }
        if (struct.isSetNodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQueueName()) {
          oprot.writeString(struct.queueName);
        }
        if (struct.isSetNodeId()) {
          oprot.writeString(struct.nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSlotId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.queueName = iprot.readString();
          struct.setQueueNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nodeId = iprot.readString();
          struct.setNodeIdIsSet(true);
        }
      }
    }

  }

  public static class getSlotId_result implements org.apache.thrift.TBase<getSlotId_result, getSlotId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSlotId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSlotId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSlotId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSlotId_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSlotId_result.class, metaDataMap);
    }

    public getSlotId_result() {
    }

    public getSlotId_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSlotId_result(getSlotId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getSlotId_result deepCopy() {
      return new getSlotId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getSlotId_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSlotId_result)
        return this.equals((getSlotId_result)that);
      return false;
    }

    public boolean equals(getSlotId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSlotId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSlotId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSlotId_resultStandardSchemeFactory implements SchemeFactory {
      public getSlotId_resultStandardScheme getScheme() {
        return new getSlotId_resultStandardScheme();
      }
    }

    private static class getSlotId_resultStandardScheme extends StandardScheme<getSlotId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSlotId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSlotId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSlotId_resultTupleSchemeFactory implements SchemeFactory {
      public getSlotId_resultTupleScheme getScheme() {
        return new getSlotId_resultTupleScheme();
      }
    }

    private static class getSlotId_resultTupleScheme extends TupleScheme<getSlotId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSlotId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSlotId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateMessageId_args implements org.apache.thrift.TBase<updateMessageId_args, updateMessageId_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateMessageId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMessageId_args");

    private static final org.apache.thrift.protocol.TField QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queueName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField START_MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("startMessageId", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField END_MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("endMessageId", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField LOCAL_SAFE_ZONE_FIELD_DESC = new org.apache.thrift.protocol.TField("localSafeZone", org.apache.thrift.protocol.TType.I64, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMessageId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMessageId_argsTupleSchemeFactory());
    }

    public String queueName; // required
    public String nodeId; // required
    public long startMessageId; // required
    public long endMessageId; // required
    public long localSafeZone; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUEUE_NAME((short)1, "queueName"),
      NODE_ID((short)2, "nodeId"),
      START_MESSAGE_ID((short)3, "startMessageId"),
      END_MESSAGE_ID((short)4, "endMessageId"),
      LOCAL_SAFE_ZONE((short)5, "localSafeZone");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUEUE_NAME
            return QUEUE_NAME;
          case 2: // NODE_ID
            return NODE_ID;
          case 3: // START_MESSAGE_ID
            return START_MESSAGE_ID;
          case 4: // END_MESSAGE_ID
            return END_MESSAGE_ID;
          case 5: // LOCAL_SAFE_ZONE
            return LOCAL_SAFE_ZONE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STARTMESSAGEID_ISSET_ID = 0;
    private static final int __ENDMESSAGEID_ISSET_ID = 1;
    private static final int __LOCALSAFEZONE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("queueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("startMessageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("endMessageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LOCAL_SAFE_ZONE, new org.apache.thrift.meta_data.FieldMetaData("localSafeZone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMessageId_args.class, metaDataMap);
    }

    public updateMessageId_args() {
    }

    public updateMessageId_args(
      String queueName,
      String nodeId,
      long startMessageId,
      long endMessageId,
      long localSafeZone)
    {
      this();
      this.queueName = queueName;
      this.nodeId = nodeId;
      this.startMessageId = startMessageId;
      setStartMessageIdIsSet(true);
      this.endMessageId = endMessageId;
      setEndMessageIdIsSet(true);
      this.localSafeZone = localSafeZone;
      setLocalSafeZoneIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMessageId_args(updateMessageId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetQueueName()) {
        this.queueName = other.queueName;
      }
      if (other.isSetNodeId()) {
        this.nodeId = other.nodeId;
      }
      this.startMessageId = other.startMessageId;
      this.endMessageId = other.endMessageId;
      this.localSafeZone = other.localSafeZone;
    }

    public updateMessageId_args deepCopy() {
      return new updateMessageId_args(this);
    }

    @Override
    public void clear() {
      this.queueName = null;
      this.nodeId = null;
      setStartMessageIdIsSet(false);
      this.startMessageId = 0;
      setEndMessageIdIsSet(false);
      this.endMessageId = 0;
      setLocalSafeZoneIsSet(false);
      this.localSafeZone = 0;
    }

    public String getQueueName() {
      return this.queueName;
    }

    public updateMessageId_args setQueueName(String queueName) {
      this.queueName = queueName;
      return this;
    }

    public void unsetQueueName() {
      this.queueName = null;
    }

    /** Returns true if field queueName is set (has been assigned a value) and false otherwise */
    public boolean isSetQueueName() {
      return this.queueName != null;
    }

    public void setQueueNameIsSet(boolean value) {
      if (!value) {
        this.queueName = null;
      }
    }

    public String getNodeId() {
      return this.nodeId;
    }

    public updateMessageId_args setNodeId(String nodeId) {
      this.nodeId = nodeId;
      return this;
    }

    public void unsetNodeId() {
      this.nodeId = null;
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return this.nodeId != null;
    }

    public void setNodeIdIsSet(boolean value) {
      if (!value) {
        this.nodeId = null;
      }
    }

    public long getStartMessageId() {
      return this.startMessageId;
    }

    public updateMessageId_args setStartMessageId(long startMessageId) {
      this.startMessageId = startMessageId;
      setStartMessageIdIsSet(true);
      return this;
    }

    public void unsetStartMessageId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTMESSAGEID_ISSET_ID);
    }

    /** Returns true if field startMessageId is set (has been assigned a value) and false otherwise */
    public boolean isSetStartMessageId() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTMESSAGEID_ISSET_ID);
    }

    public void setStartMessageIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTMESSAGEID_ISSET_ID, value);
    }

    public long getEndMessageId() {
      return this.endMessageId;
    }

    public updateMessageId_args setEndMessageId(long endMessageId) {
      this.endMessageId = endMessageId;
      setEndMessageIdIsSet(true);
      return this;
    }

    public void unsetEndMessageId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDMESSAGEID_ISSET_ID);
    }

    /** Returns true if field endMessageId is set (has been assigned a value) and false otherwise */
    public boolean isSetEndMessageId() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDMESSAGEID_ISSET_ID);
    }

    public void setEndMessageIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDMESSAGEID_ISSET_ID, value);
    }

    public long getLocalSafeZone() {
      return this.localSafeZone;
    }

    public updateMessageId_args setLocalSafeZone(long localSafeZone) {
      this.localSafeZone = localSafeZone;
      setLocalSafeZoneIsSet(true);
      return this;
    }

    public void unsetLocalSafeZone() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCALSAFEZONE_ISSET_ID);
    }

    /** Returns true if field localSafeZone is set (has been assigned a value) and false otherwise */
    public boolean isSetLocalSafeZone() {
      return EncodingUtils.testBit(__isset_bitfield, __LOCALSAFEZONE_ISSET_ID);
    }

    public void setLocalSafeZoneIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCALSAFEZONE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUEUE_NAME:
        if (value == null) {
          unsetQueueName();
        } else {
          setQueueName((String)value);
        }
        break;

      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((String)value);
        }
        break;

      case START_MESSAGE_ID:
        if (value == null) {
          unsetStartMessageId();
        } else {
          setStartMessageId((Long)value);
        }
        break;

      case END_MESSAGE_ID:
        if (value == null) {
          unsetEndMessageId();
        } else {
          setEndMessageId((Long)value);
        }
        break;

      case LOCAL_SAFE_ZONE:
        if (value == null) {
          unsetLocalSafeZone();
        } else {
          setLocalSafeZone((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUEUE_NAME:
        return getQueueName();

      case NODE_ID:
        return getNodeId();

      case START_MESSAGE_ID:
        return getStartMessageId();

      case END_MESSAGE_ID:
        return getEndMessageId();

      case LOCAL_SAFE_ZONE:
        return getLocalSafeZone();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUEUE_NAME:
        return isSetQueueName();
      case NODE_ID:
        return isSetNodeId();
      case START_MESSAGE_ID:
        return isSetStartMessageId();
      case END_MESSAGE_ID:
        return isSetEndMessageId();
      case LOCAL_SAFE_ZONE:
        return isSetLocalSafeZone();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMessageId_args)
        return this.equals((updateMessageId_args)that);
      return false;
    }

    public boolean equals(updateMessageId_args that) {
      if (that == null)
        return false;

      boolean this_present_queueName = true && this.isSetQueueName();
      boolean that_present_queueName = true && that.isSetQueueName();
      if (this_present_queueName || that_present_queueName) {
        if (!(this_present_queueName && that_present_queueName))
          return false;
        if (!this.queueName.equals(that.queueName))
          return false;
      }

      boolean this_present_nodeId = true && this.isSetNodeId();
      boolean that_present_nodeId = true && that.isSetNodeId();
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (!this.nodeId.equals(that.nodeId))
          return false;
      }

      boolean this_present_startMessageId = true;
      boolean that_present_startMessageId = true;
      if (this_present_startMessageId || that_present_startMessageId) {
        if (!(this_present_startMessageId && that_present_startMessageId))
          return false;
        if (this.startMessageId != that.startMessageId)
          return false;
      }

      boolean this_present_endMessageId = true;
      boolean that_present_endMessageId = true;
      if (this_present_endMessageId || that_present_endMessageId) {
        if (!(this_present_endMessageId && that_present_endMessageId))
          return false;
        if (this.endMessageId != that.endMessageId)
          return false;
      }

      boolean this_present_localSafeZone = true;
      boolean that_present_localSafeZone = true;
      if (this_present_localSafeZone || that_present_localSafeZone) {
        if (!(this_present_localSafeZone && that_present_localSafeZone))
          return false;
        if (this.localSafeZone != that.localSafeZone)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_queueName = true && (isSetQueueName());
      list.add(present_queueName);
      if (present_queueName)
        list.add(queueName);

      boolean present_nodeId = true && (isSetNodeId());
      list.add(present_nodeId);
      if (present_nodeId)
        list.add(nodeId);

      boolean present_startMessageId = true;
      list.add(present_startMessageId);
      if (present_startMessageId)
        list.add(startMessageId);

      boolean present_endMessageId = true;
      list.add(present_endMessageId);
      if (present_endMessageId)
        list.add(endMessageId);

      boolean present_localSafeZone = true;
      list.add(present_localSafeZone);
      if (present_localSafeZone)
        list.add(localSafeZone);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateMessageId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQueueName()).compareTo(other.isSetQueueName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueueName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueName, other.queueName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartMessageId()).compareTo(other.isSetStartMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartMessageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startMessageId, other.startMessageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndMessageId()).compareTo(other.isSetEndMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndMessageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endMessageId, other.endMessageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLocalSafeZone()).compareTo(other.isSetLocalSafeZone());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocalSafeZone()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localSafeZone, other.localSafeZone);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMessageId_args(");
      boolean first = true;

      sb.append("queueName:");
      if (this.queueName == null) {
        sb.append("null");
      } else {
        sb.append(this.queueName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeId:");
      if (this.nodeId == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startMessageId:");
      sb.append(this.startMessageId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endMessageId:");
      sb.append(this.endMessageId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("localSafeZone:");
      sb.append(this.localSafeZone);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMessageId_argsStandardSchemeFactory implements SchemeFactory {
      public updateMessageId_argsStandardScheme getScheme() {
        return new updateMessageId_argsStandardScheme();
      }
    }

    private static class updateMessageId_argsStandardScheme extends StandardScheme<updateMessageId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMessageId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUEUE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.queueName = iprot.readString();
                struct.setQueueNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeId = iprot.readString();
                struct.setNodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_MESSAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startMessageId = iprot.readI64();
                struct.setStartMessageIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_MESSAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endMessageId = iprot.readI64();
                struct.setEndMessageIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // LOCAL_SAFE_ZONE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.localSafeZone = iprot.readI64();
                struct.setLocalSafeZoneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMessageId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.queueName != null) {
          oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
          oprot.writeString(struct.queueName);
          oprot.writeFieldEnd();
        }
        if (struct.nodeId != null) {
          oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
          oprot.writeString(struct.nodeId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_MESSAGE_ID_FIELD_DESC);
        oprot.writeI64(struct.startMessageId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_MESSAGE_ID_FIELD_DESC);
        oprot.writeI64(struct.endMessageId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LOCAL_SAFE_ZONE_FIELD_DESC);
        oprot.writeI64(struct.localSafeZone);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMessageId_argsTupleSchemeFactory implements SchemeFactory {
      public updateMessageId_argsTupleScheme getScheme() {
        return new updateMessageId_argsTupleScheme();
      }
    }

    private static class updateMessageId_argsTupleScheme extends TupleScheme<updateMessageId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMessageId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQueueName()) {
          optionals.set(0);
        }
        if (struct.isSetNodeId()) {
          optionals.set(1);
        }
        if (struct.isSetStartMessageId()) {
          optionals.set(2);
        }
        if (struct.isSetEndMessageId()) {
          optionals.set(3);
        }
        if (struct.isSetLocalSafeZone()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetQueueName()) {
          oprot.writeString(struct.queueName);
        }
        if (struct.isSetNodeId()) {
          oprot.writeString(struct.nodeId);
        }
        if (struct.isSetStartMessageId()) {
          oprot.writeI64(struct.startMessageId);
        }
        if (struct.isSetEndMessageId()) {
          oprot.writeI64(struct.endMessageId);
        }
        if (struct.isSetLocalSafeZone()) {
          oprot.writeI64(struct.localSafeZone);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMessageId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.queueName = iprot.readString();
          struct.setQueueNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nodeId = iprot.readString();
          struct.setNodeIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startMessageId = iprot.readI64();
          struct.setStartMessageIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.endMessageId = iprot.readI64();
          struct.setEndMessageIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.localSafeZone = iprot.readI64();
          struct.setLocalSafeZoneIsSet(true);
        }
      }
    }

  }

  public static class updateMessageId_result implements org.apache.thrift.TBase<updateMessageId_result, updateMessageId_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateMessageId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMessageId_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMessageId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMessageId_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMessageId_result.class, metaDataMap);
    }

    public updateMessageId_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMessageId_result(updateMessageId_result other) {
    }

    public updateMessageId_result deepCopy() {
      return new updateMessageId_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMessageId_result)
        return this.equals((updateMessageId_result)that);
      return false;
    }

    public boolean equals(updateMessageId_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(updateMessageId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMessageId_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMessageId_resultStandardSchemeFactory implements SchemeFactory {
      public updateMessageId_resultStandardScheme getScheme() {
        return new updateMessageId_resultStandardScheme();
      }
    }

    private static class updateMessageId_resultStandardScheme extends StandardScheme<updateMessageId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMessageId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMessageId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMessageId_resultTupleSchemeFactory implements SchemeFactory {
      public updateMessageId_resultTupleScheme getScheme() {
        return new updateMessageId_resultTupleScheme();
      }
    }

    private static class updateMessageId_resultTupleScheme extends TupleScheme<updateMessageId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMessageId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMessageId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class deleteSlot_args implements org.apache.thrift.TBase<deleteSlot_args, deleteSlot_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSlot_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSlot_args");

    private static final org.apache.thrift.protocol.TField QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queueName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SLOT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("slotId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSlot_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSlot_argsTupleSchemeFactory());
    }

    public String queueName; // required
    public long slotId; // required
    public String nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUEUE_NAME((short)1, "queueName"),
      SLOT_ID((short)2, "slotId"),
      NODE_ID((short)3, "nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUEUE_NAME
            return QUEUE_NAME;
          case 2: // SLOT_ID
            return SLOT_ID;
          case 3: // NODE_ID
            return NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SLOTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("queueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SLOT_ID, new org.apache.thrift.meta_data.FieldMetaData("slotId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSlot_args.class, metaDataMap);
    }

    public deleteSlot_args() {
    }

    public deleteSlot_args(
      String queueName,
      long slotId,
      String nodeId)
    {
      this();
      this.queueName = queueName;
      this.slotId = slotId;
      setSlotIdIsSet(true);
      this.nodeId = nodeId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSlot_args(deleteSlot_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetQueueName()) {
        this.queueName = other.queueName;
      }
      this.slotId = other.slotId;
      if (other.isSetNodeId()) {
        this.nodeId = other.nodeId;
      }
    }

    public deleteSlot_args deepCopy() {
      return new deleteSlot_args(this);
    }

    @Override
    public void clear() {
      this.queueName = null;
      setSlotIdIsSet(false);
      this.slotId = 0;
      this.nodeId = null;
    }

    public String getQueueName() {
      return this.queueName;
    }

    public deleteSlot_args setQueueName(String queueName) {
      this.queueName = queueName;
      return this;
    }

    public void unsetQueueName() {
      this.queueName = null;
    }

    /** Returns true if field queueName is set (has been assigned a value) and false otherwise */
    public boolean isSetQueueName() {
      return this.queueName != null;
    }

    public void setQueueNameIsSet(boolean value) {
      if (!value) {
        this.queueName = null;
      }
    }

    public long getSlotId() {
      return this.slotId;
    }

    public deleteSlot_args setSlotId(long slotId) {
      this.slotId = slotId;
      setSlotIdIsSet(true);
      return this;
    }

    public void unsetSlotId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLOTID_ISSET_ID);
    }

    /** Returns true if field slotId is set (has been assigned a value) and false otherwise */
    public boolean isSetSlotId() {
      return EncodingUtils.testBit(__isset_bitfield, __SLOTID_ISSET_ID);
    }

    public void setSlotIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLOTID_ISSET_ID, value);
    }

    public String getNodeId() {
      return this.nodeId;
    }

    public deleteSlot_args setNodeId(String nodeId) {
      this.nodeId = nodeId;
      return this;
    }

    public void unsetNodeId() {
      this.nodeId = null;
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return this.nodeId != null;
    }

    public void setNodeIdIsSet(boolean value) {
      if (!value) {
        this.nodeId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUEUE_NAME:
        if (value == null) {
          unsetQueueName();
        } else {
          setQueueName((String)value);
        }
        break;

      case SLOT_ID:
        if (value == null) {
          unsetSlotId();
        } else {
          setSlotId((Long)value);
        }
        break;

      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUEUE_NAME:
        return getQueueName();

      case SLOT_ID:
        return getSlotId();

      case NODE_ID:
        return getNodeId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUEUE_NAME:
        return isSetQueueName();
      case SLOT_ID:
        return isSetSlotId();
      case NODE_ID:
        return isSetNodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSlot_args)
        return this.equals((deleteSlot_args)that);
      return false;
    }

    public boolean equals(deleteSlot_args that) {
      if (that == null)
        return false;

      boolean this_present_queueName = true && this.isSetQueueName();
      boolean that_present_queueName = true && that.isSetQueueName();
      if (this_present_queueName || that_present_queueName) {
        if (!(this_present_queueName && that_present_queueName))
          return false;
        if (!this.queueName.equals(that.queueName))
          return false;
      }

      boolean this_present_slotId = true;
      boolean that_present_slotId = true;
      if (this_present_slotId || that_present_slotId) {
        if (!(this_present_slotId && that_present_slotId))
          return false;
        if (this.slotId != that.slotId)
          return false;
      }

      boolean this_present_nodeId = true && this.isSetNodeId();
      boolean that_present_nodeId = true && that.isSetNodeId();
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (!this.nodeId.equals(that.nodeId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_queueName = true && (isSetQueueName());
      list.add(present_queueName);
      if (present_queueName)
        list.add(queueName);

      boolean present_slotId = true;
      list.add(present_slotId);
      if (present_slotId)
        list.add(slotId);

      boolean present_nodeId = true && (isSetNodeId());
      list.add(present_nodeId);
      if (present_nodeId)
        list.add(nodeId);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteSlot_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQueueName()).compareTo(other.isSetQueueName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueueName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueName, other.queueName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSlotId()).compareTo(other.isSetSlotId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSlotId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slotId, other.slotId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSlot_args(");
      boolean first = true;

      sb.append("queueName:");
      if (this.queueName == null) {
        sb.append("null");
      } else {
        sb.append(this.queueName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("slotId:");
      sb.append(this.slotId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeId:");
      if (this.nodeId == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSlot_argsStandardSchemeFactory implements SchemeFactory {
      public deleteSlot_argsStandardScheme getScheme() {
        return new deleteSlot_argsStandardScheme();
      }
    }

    private static class deleteSlot_argsStandardScheme extends StandardScheme<deleteSlot_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSlot_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUEUE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.queueName = iprot.readString();
                struct.setQueueNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SLOT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.slotId = iprot.readI64();
                struct.setSlotIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeId = iprot.readString();
                struct.setNodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSlot_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.queueName != null) {
          oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
          oprot.writeString(struct.queueName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SLOT_ID_FIELD_DESC);
        oprot.writeI64(struct.slotId);
        oprot.writeFieldEnd();
        if (struct.nodeId != null) {
          oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
          oprot.writeString(struct.nodeId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSlot_argsTupleSchemeFactory implements SchemeFactory {
      public deleteSlot_argsTupleScheme getScheme() {
        return new deleteSlot_argsTupleScheme();
      }
    }

    private static class deleteSlot_argsTupleScheme extends TupleScheme<deleteSlot_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSlot_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQueueName()) {
          optionals.set(0);
        }
        if (struct.isSetSlotId()) {
          optionals.set(1);
        }
        if (struct.isSetNodeId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetQueueName()) {
          oprot.writeString(struct.queueName);
        }
        if (struct.isSetSlotId()) {
          oprot.writeI64(struct.slotId);
        }
        if (struct.isSetNodeId()) {
          oprot.writeString(struct.nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSlot_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.queueName = iprot.readString();
          struct.setQueueNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.slotId = iprot.readI64();
          struct.setSlotIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.nodeId = iprot.readString();
          struct.setNodeIdIsSet(true);
        }
      }
    }

  }

  public static class deleteSlot_result implements org.apache.thrift.TBase<deleteSlot_result, deleteSlot_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSlot_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSlot_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSlot_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSlot_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSlot_result.class, metaDataMap);
    }

    public deleteSlot_result() {
    }

    public deleteSlot_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSlot_result(deleteSlot_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteSlot_result deepCopy() {
      return new deleteSlot_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteSlot_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSlot_result)
        return this.equals((deleteSlot_result)that);
      return false;
    }

    public boolean equals(deleteSlot_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteSlot_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSlot_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSlot_resultStandardSchemeFactory implements SchemeFactory {
      public deleteSlot_resultStandardScheme getScheme() {
        return new deleteSlot_resultStandardScheme();
      }
    }

    private static class deleteSlot_resultStandardScheme extends StandardScheme<deleteSlot_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSlot_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSlot_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSlot_resultTupleSchemeFactory implements SchemeFactory {
      public deleteSlot_resultTupleScheme getScheme() {
        return new deleteSlot_resultTupleScheme();
      }
    }

    private static class deleteSlot_resultTupleScheme extends TupleScheme<deleteSlot_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSlot_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSlot_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reAssignSlotWhenNoSubscribers_args implements org.apache.thrift.TBase<reAssignSlotWhenNoSubscribers_args, reAssignSlotWhenNoSubscribers_args._Fields>, java.io.Serializable, Cloneable, Comparable<reAssignSlotWhenNoSubscribers_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reAssignSlotWhenNoSubscribers_args");

    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queueName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reAssignSlotWhenNoSubscribers_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reAssignSlotWhenNoSubscribers_argsTupleSchemeFactory());
    }

    public String nodeId; // required
    public String queueName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_ID((short)1, "nodeId"),
      QUEUE_NAME((short)2, "queueName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_ID
            return NODE_ID;
          case 2: // QUEUE_NAME
            return QUEUE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("queueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reAssignSlotWhenNoSubscribers_args.class, metaDataMap);
    }

    public reAssignSlotWhenNoSubscribers_args() {
    }

    public reAssignSlotWhenNoSubscribers_args(
      String nodeId,
      String queueName)
    {
      this();
      this.nodeId = nodeId;
      this.queueName = queueName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reAssignSlotWhenNoSubscribers_args(reAssignSlotWhenNoSubscribers_args other) {
      if (other.isSetNodeId()) {
        this.nodeId = other.nodeId;
      }
      if (other.isSetQueueName()) {
        this.queueName = other.queueName;
      }
    }

    public reAssignSlotWhenNoSubscribers_args deepCopy() {
      return new reAssignSlotWhenNoSubscribers_args(this);
    }

    @Override
    public void clear() {
      this.nodeId = null;
      this.queueName = null;
    }

    public String getNodeId() {
      return this.nodeId;
    }

    public reAssignSlotWhenNoSubscribers_args setNodeId(String nodeId) {
      this.nodeId = nodeId;
      return this;
    }

    public void unsetNodeId() {
      this.nodeId = null;
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return this.nodeId != null;
    }

    public void setNodeIdIsSet(boolean value) {
      if (!value) {
        this.nodeId = null;
      }
    }

    public String getQueueName() {
      return this.queueName;
    }

    public reAssignSlotWhenNoSubscribers_args setQueueName(String queueName) {
      this.queueName = queueName;
      return this;
    }

    public void unsetQueueName() {
      this.queueName = null;
    }

    /** Returns true if field queueName is set (has been assigned a value) and false otherwise */
    public boolean isSetQueueName() {
      return this.queueName != null;
    }

    public void setQueueNameIsSet(boolean value) {
      if (!value) {
        this.queueName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((String)value);
        }
        break;

      case QUEUE_NAME:
        if (value == null) {
          unsetQueueName();
        } else {
          setQueueName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_ID:
        return getNodeId();

      case QUEUE_NAME:
        return getQueueName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODE_ID:
        return isSetNodeId();
      case QUEUE_NAME:
        return isSetQueueName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reAssignSlotWhenNoSubscribers_args)
        return this.equals((reAssignSlotWhenNoSubscribers_args)that);
      return false;
    }

    public boolean equals(reAssignSlotWhenNoSubscribers_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeId = true && this.isSetNodeId();
      boolean that_present_nodeId = true && that.isSetNodeId();
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (!this.nodeId.equals(that.nodeId))
          return false;
      }

      boolean this_present_queueName = true && this.isSetQueueName();
      boolean that_present_queueName = true && that.isSetQueueName();
      if (this_present_queueName || that_present_queueName) {
        if (!(this_present_queueName && that_present_queueName))
          return false;
        if (!this.queueName.equals(that.queueName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_nodeId = true && (isSetNodeId());
      list.add(present_nodeId);
      if (present_nodeId)
        list.add(nodeId);

      boolean present_queueName = true && (isSetQueueName());
      list.add(present_queueName);
      if (present_queueName)
        list.add(queueName);

      return list.hashCode();
    }

    @Override
    public int compareTo(reAssignSlotWhenNoSubscribers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQueueName()).compareTo(other.isSetQueueName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueueName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueName, other.queueName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reAssignSlotWhenNoSubscribers_args(");
      boolean first = true;

      sb.append("nodeId:");
      if (this.nodeId == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("queueName:");
      if (this.queueName == null) {
        sb.append("null");
      } else {
        sb.append(this.queueName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reAssignSlotWhenNoSubscribers_argsStandardSchemeFactory implements SchemeFactory {
      public reAssignSlotWhenNoSubscribers_argsStandardScheme getScheme() {
        return new reAssignSlotWhenNoSubscribers_argsStandardScheme();
      }
    }

    private static class reAssignSlotWhenNoSubscribers_argsStandardScheme extends StandardScheme<reAssignSlotWhenNoSubscribers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reAssignSlotWhenNoSubscribers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeId = iprot.readString();
                struct.setNodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QUEUE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.queueName = iprot.readString();
                struct.setQueueNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reAssignSlotWhenNoSubscribers_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nodeId != null) {
          oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
          oprot.writeString(struct.nodeId);
          oprot.writeFieldEnd();
        }
        if (struct.queueName != null) {
          oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
          oprot.writeString(struct.queueName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reAssignSlotWhenNoSubscribers_argsTupleSchemeFactory implements SchemeFactory {
      public reAssignSlotWhenNoSubscribers_argsTupleScheme getScheme() {
        return new reAssignSlotWhenNoSubscribers_argsTupleScheme();
      }
    }

    private static class reAssignSlotWhenNoSubscribers_argsTupleScheme extends TupleScheme<reAssignSlotWhenNoSubscribers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reAssignSlotWhenNoSubscribers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNodeId()) {
          optionals.set(0);
        }
        if (struct.isSetQueueName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNodeId()) {
          oprot.writeString(struct.nodeId);
        }
        if (struct.isSetQueueName()) {
          oprot.writeString(struct.queueName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reAssignSlotWhenNoSubscribers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.nodeId = iprot.readString();
          struct.setNodeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.queueName = iprot.readString();
          struct.setQueueNameIsSet(true);
        }
      }
    }

  }

  public static class reAssignSlotWhenNoSubscribers_result implements org.apache.thrift.TBase<reAssignSlotWhenNoSubscribers_result, reAssignSlotWhenNoSubscribers_result._Fields>, java.io.Serializable, Cloneable, Comparable<reAssignSlotWhenNoSubscribers_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reAssignSlotWhenNoSubscribers_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reAssignSlotWhenNoSubscribers_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reAssignSlotWhenNoSubscribers_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reAssignSlotWhenNoSubscribers_result.class, metaDataMap);
    }

    public reAssignSlotWhenNoSubscribers_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reAssignSlotWhenNoSubscribers_result(reAssignSlotWhenNoSubscribers_result other) {
    }

    public reAssignSlotWhenNoSubscribers_result deepCopy() {
      return new reAssignSlotWhenNoSubscribers_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reAssignSlotWhenNoSubscribers_result)
        return this.equals((reAssignSlotWhenNoSubscribers_result)that);
      return false;
    }

    public boolean equals(reAssignSlotWhenNoSubscribers_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(reAssignSlotWhenNoSubscribers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reAssignSlotWhenNoSubscribers_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reAssignSlotWhenNoSubscribers_resultStandardSchemeFactory implements SchemeFactory {
      public reAssignSlotWhenNoSubscribers_resultStandardScheme getScheme() {
        return new reAssignSlotWhenNoSubscribers_resultStandardScheme();
      }
    }

    private static class reAssignSlotWhenNoSubscribers_resultStandardScheme extends StandardScheme<reAssignSlotWhenNoSubscribers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reAssignSlotWhenNoSubscribers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reAssignSlotWhenNoSubscribers_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reAssignSlotWhenNoSubscribers_resultTupleSchemeFactory implements SchemeFactory {
      public reAssignSlotWhenNoSubscribers_resultTupleScheme getScheme() {
        return new reAssignSlotWhenNoSubscribers_resultTupleScheme();
      }
    }

    private static class reAssignSlotWhenNoSubscribers_resultTupleScheme extends TupleScheme<reAssignSlotWhenNoSubscribers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reAssignSlotWhenNoSubscribers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reAssignSlotWhenNoSubscribers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateCurrentMessageIdForSafeZone_args implements org.apache.thrift.TBase<updateCurrentMessageIdForSafeZone_args, updateCurrentMessageIdForSafeZone_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateCurrentMessageIdForSafeZone_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCurrentMessageIdForSafeZone_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCurrentMessageIdForSafeZone_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCurrentMessageIdForSafeZone_argsTupleSchemeFactory());
    }

    public long messageId; // required
    public String nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE_ID((short)1, "messageId"),
      NODE_ID((short)2, "nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE_ID
            return MESSAGE_ID;
          case 2: // NODE_ID
            return NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MESSAGEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCurrentMessageIdForSafeZone_args.class, metaDataMap);
    }

    public updateCurrentMessageIdForSafeZone_args() {
    }

    public updateCurrentMessageIdForSafeZone_args(
      long messageId,
      String nodeId)
    {
      this();
      this.messageId = messageId;
      setMessageIdIsSet(true);
      this.nodeId = nodeId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCurrentMessageIdForSafeZone_args(updateCurrentMessageIdForSafeZone_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.messageId = other.messageId;
      if (other.isSetNodeId()) {
        this.nodeId = other.nodeId;
      }
    }

    public updateCurrentMessageIdForSafeZone_args deepCopy() {
      return new updateCurrentMessageIdForSafeZone_args(this);
    }

    @Override
    public void clear() {
      setMessageIdIsSet(false);
      this.messageId = 0;
      this.nodeId = null;
    }

    public long getMessageId() {
      return this.messageId;
    }

    public updateCurrentMessageIdForSafeZone_args setMessageId(long messageId) {
      this.messageId = messageId;
      setMessageIdIsSet(true);
      return this;
    }

    public void unsetMessageId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MESSAGEID_ISSET_ID);
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
      return EncodingUtils.testBit(__isset_bitfield, __MESSAGEID_ISSET_ID);
    }

    public void setMessageIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MESSAGEID_ISSET_ID, value);
    }

    public String getNodeId() {
      return this.nodeId;
    }

    public updateCurrentMessageIdForSafeZone_args setNodeId(String nodeId) {
      this.nodeId = nodeId;
      return this;
    }

    public void unsetNodeId() {
      this.nodeId = null;
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return this.nodeId != null;
    }

    public void setNodeIdIsSet(boolean value) {
      if (!value) {
        this.nodeId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MESSAGE_ID:
        if (value == null) {
          unsetMessageId();
        } else {
          setMessageId((Long)value);
        }
        break;

      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE_ID:
        return getMessageId();

      case NODE_ID:
        return getNodeId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE_ID:
        return isSetMessageId();
      case NODE_ID:
        return isSetNodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCurrentMessageIdForSafeZone_args)
        return this.equals((updateCurrentMessageIdForSafeZone_args)that);
      return false;
    }

    public boolean equals(updateCurrentMessageIdForSafeZone_args that) {
      if (that == null)
        return false;

      boolean this_present_messageId = true;
      boolean that_present_messageId = true;
      if (this_present_messageId || that_present_messageId) {
        if (!(this_present_messageId && that_present_messageId))
          return false;
        if (this.messageId != that.messageId)
          return false;
      }

      boolean this_present_nodeId = true && this.isSetNodeId();
      boolean that_present_nodeId = true && that.isSetNodeId();
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (!this.nodeId.equals(that.nodeId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_messageId = true;
      list.add(present_messageId);
      if (present_messageId)
        list.add(messageId);

      boolean present_nodeId = true && (isSetNodeId());
      list.add(present_nodeId);
      if (present_nodeId)
        list.add(nodeId);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateCurrentMessageIdForSafeZone_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMessageId()).compareTo(other.isSetMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, other.messageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCurrentMessageIdForSafeZone_args(");
      boolean first = true;

      sb.append("messageId:");
      sb.append(this.messageId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeId:");
      if (this.nodeId == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCurrentMessageIdForSafeZone_argsStandardSchemeFactory implements SchemeFactory {
      public updateCurrentMessageIdForSafeZone_argsStandardScheme getScheme() {
        return new updateCurrentMessageIdForSafeZone_argsStandardScheme();
      }
    }

    private static class updateCurrentMessageIdForSafeZone_argsStandardScheme extends StandardScheme<updateCurrentMessageIdForSafeZone_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCurrentMessageIdForSafeZone_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.messageId = iprot.readI64();
                struct.setMessageIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeId = iprot.readString();
                struct.setNodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCurrentMessageIdForSafeZone_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
        oprot.writeI64(struct.messageId);
        oprot.writeFieldEnd();
        if (struct.nodeId != null) {
          oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
          oprot.writeString(struct.nodeId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCurrentMessageIdForSafeZone_argsTupleSchemeFactory implements SchemeFactory {
      public updateCurrentMessageIdForSafeZone_argsTupleScheme getScheme() {
        return new updateCurrentMessageIdForSafeZone_argsTupleScheme();
      }
    }

    private static class updateCurrentMessageIdForSafeZone_argsTupleScheme extends TupleScheme<updateCurrentMessageIdForSafeZone_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCurrentMessageIdForSafeZone_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMessageId()) {
          optionals.set(0);
        }
        if (struct.isSetNodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMessageId()) {
          oprot.writeI64(struct.messageId);
        }
        if (struct.isSetNodeId()) {
          oprot.writeString(struct.nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCurrentMessageIdForSafeZone_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.messageId = iprot.readI64();
          struct.setMessageIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nodeId = iprot.readString();
          struct.setNodeIdIsSet(true);
        }
      }
    }

  }

  public static class updateCurrentMessageIdForSafeZone_result implements org.apache.thrift.TBase<updateCurrentMessageIdForSafeZone_result, updateCurrentMessageIdForSafeZone_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateCurrentMessageIdForSafeZone_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCurrentMessageIdForSafeZone_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCurrentMessageIdForSafeZone_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCurrentMessageIdForSafeZone_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCurrentMessageIdForSafeZone_result.class, metaDataMap);
    }

    public updateCurrentMessageIdForSafeZone_result() {
    }

    public updateCurrentMessageIdForSafeZone_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCurrentMessageIdForSafeZone_result(updateCurrentMessageIdForSafeZone_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateCurrentMessageIdForSafeZone_result deepCopy() {
      return new updateCurrentMessageIdForSafeZone_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public updateCurrentMessageIdForSafeZone_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCurrentMessageIdForSafeZone_result)
        return this.equals((updateCurrentMessageIdForSafeZone_result)that);
      return false;
    }

    public boolean equals(updateCurrentMessageIdForSafeZone_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateCurrentMessageIdForSafeZone_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCurrentMessageIdForSafeZone_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCurrentMessageIdForSafeZone_resultStandardSchemeFactory implements SchemeFactory {
      public updateCurrentMessageIdForSafeZone_resultStandardScheme getScheme() {
        return new updateCurrentMessageIdForSafeZone_resultStandardScheme();
      }
    }

    private static class updateCurrentMessageIdForSafeZone_resultStandardScheme extends StandardScheme<updateCurrentMessageIdForSafeZone_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCurrentMessageIdForSafeZone_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCurrentMessageIdForSafeZone_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCurrentMessageIdForSafeZone_resultTupleSchemeFactory implements SchemeFactory {
      public updateCurrentMessageIdForSafeZone_resultTupleScheme getScheme() {
        return new updateCurrentMessageIdForSafeZone_resultTupleScheme();
      }
    }

    private static class updateCurrentMessageIdForSafeZone_resultTupleScheme extends TupleScheme<updateCurrentMessageIdForSafeZone_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCurrentMessageIdForSafeZone_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCurrentMessageIdForSafeZone_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class clearAllActiveSlotRelationsToQueue_args implements org.apache.thrift.TBase<clearAllActiveSlotRelationsToQueue_args, clearAllActiveSlotRelationsToQueue_args._Fields>, java.io.Serializable, Cloneable, Comparable<clearAllActiveSlotRelationsToQueue_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clearAllActiveSlotRelationsToQueue_args");

    private static final org.apache.thrift.protocol.TField QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queueName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clearAllActiveSlotRelationsToQueue_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clearAllActiveSlotRelationsToQueue_argsTupleSchemeFactory());
    }

    public String queueName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUEUE_NAME((short)1, "queueName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUEUE_NAME
            return QUEUE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("queueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clearAllActiveSlotRelationsToQueue_args.class, metaDataMap);
    }

    public clearAllActiveSlotRelationsToQueue_args() {
    }

    public clearAllActiveSlotRelationsToQueue_args(
      String queueName)
    {
      this();
      this.queueName = queueName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clearAllActiveSlotRelationsToQueue_args(clearAllActiveSlotRelationsToQueue_args other) {
      if (other.isSetQueueName()) {
        this.queueName = other.queueName;
      }
    }

    public clearAllActiveSlotRelationsToQueue_args deepCopy() {
      return new clearAllActiveSlotRelationsToQueue_args(this);
    }

    @Override
    public void clear() {
      this.queueName = null;
    }

    public String getQueueName() {
      return this.queueName;
    }

    public clearAllActiveSlotRelationsToQueue_args setQueueName(String queueName) {
      this.queueName = queueName;
      return this;
    }

    public void unsetQueueName() {
      this.queueName = null;
    }

    /** Returns true if field queueName is set (has been assigned a value) and false otherwise */
    public boolean isSetQueueName() {
      return this.queueName != null;
    }

    public void setQueueNameIsSet(boolean value) {
      if (!value) {
        this.queueName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUEUE_NAME:
        if (value == null) {
          unsetQueueName();
        } else {
          setQueueName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUEUE_NAME:
        return getQueueName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUEUE_NAME:
        return isSetQueueName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clearAllActiveSlotRelationsToQueue_args)
        return this.equals((clearAllActiveSlotRelationsToQueue_args)that);
      return false;
    }

    public boolean equals(clearAllActiveSlotRelationsToQueue_args that) {
      if (that == null)
        return false;

      boolean this_present_queueName = true && this.isSetQueueName();
      boolean that_present_queueName = true && that.isSetQueueName();
      if (this_present_queueName || that_present_queueName) {
        if (!(this_present_queueName && that_present_queueName))
          return false;
        if (!this.queueName.equals(that.queueName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_queueName = true && (isSetQueueName());
      list.add(present_queueName);
      if (present_queueName)
        list.add(queueName);

      return list.hashCode();
    }

    @Override
    public int compareTo(clearAllActiveSlotRelationsToQueue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQueueName()).compareTo(other.isSetQueueName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueueName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueName, other.queueName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clearAllActiveSlotRelationsToQueue_args(");
      boolean first = true;

      sb.append("queueName:");
      if (this.queueName == null) {
        sb.append("null");
      } else {
        sb.append(this.queueName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clearAllActiveSlotRelationsToQueue_argsStandardSchemeFactory implements SchemeFactory {
      public clearAllActiveSlotRelationsToQueue_argsStandardScheme getScheme() {
        return new clearAllActiveSlotRelationsToQueue_argsStandardScheme();
      }
    }

    private static class clearAllActiveSlotRelationsToQueue_argsStandardScheme extends StandardScheme<clearAllActiveSlotRelationsToQueue_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clearAllActiveSlotRelationsToQueue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUEUE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.queueName = iprot.readString();
                struct.setQueueNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clearAllActiveSlotRelationsToQueue_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.queueName != null) {
          oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
          oprot.writeString(struct.queueName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clearAllActiveSlotRelationsToQueue_argsTupleSchemeFactory implements SchemeFactory {
      public clearAllActiveSlotRelationsToQueue_argsTupleScheme getScheme() {
        return new clearAllActiveSlotRelationsToQueue_argsTupleScheme();
      }
    }

    private static class clearAllActiveSlotRelationsToQueue_argsTupleScheme extends TupleScheme<clearAllActiveSlotRelationsToQueue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clearAllActiveSlotRelationsToQueue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQueueName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQueueName()) {
          oprot.writeString(struct.queueName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clearAllActiveSlotRelationsToQueue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.queueName = iprot.readString();
          struct.setQueueNameIsSet(true);
        }
      }
    }

  }

  public static class clearAllActiveSlotRelationsToQueue_result implements org.apache.thrift.TBase<clearAllActiveSlotRelationsToQueue_result, clearAllActiveSlotRelationsToQueue_result._Fields>, java.io.Serializable, Cloneable, Comparable<clearAllActiveSlotRelationsToQueue_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clearAllActiveSlotRelationsToQueue_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clearAllActiveSlotRelationsToQueue_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clearAllActiveSlotRelationsToQueue_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clearAllActiveSlotRelationsToQueue_result.class, metaDataMap);
    }

    public clearAllActiveSlotRelationsToQueue_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clearAllActiveSlotRelationsToQueue_result(clearAllActiveSlotRelationsToQueue_result other) {
    }

    public clearAllActiveSlotRelationsToQueue_result deepCopy() {
      return new clearAllActiveSlotRelationsToQueue_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clearAllActiveSlotRelationsToQueue_result)
        return this.equals((clearAllActiveSlotRelationsToQueue_result)that);
      return false;
    }

    public boolean equals(clearAllActiveSlotRelationsToQueue_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(clearAllActiveSlotRelationsToQueue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clearAllActiveSlotRelationsToQueue_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clearAllActiveSlotRelationsToQueue_resultStandardSchemeFactory implements SchemeFactory {
      public clearAllActiveSlotRelationsToQueue_resultStandardScheme getScheme() {
        return new clearAllActiveSlotRelationsToQueue_resultStandardScheme();
      }
    }

    private static class clearAllActiveSlotRelationsToQueue_resultStandardScheme extends StandardScheme<clearAllActiveSlotRelationsToQueue_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clearAllActiveSlotRelationsToQueue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clearAllActiveSlotRelationsToQueue_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clearAllActiveSlotRelationsToQueue_resultTupleSchemeFactory implements SchemeFactory {
      public clearAllActiveSlotRelationsToQueue_resultTupleScheme getScheme() {
        return new clearAllActiveSlotRelationsToQueue_resultTupleScheme();
      }
    }

    private static class clearAllActiveSlotRelationsToQueue_resultTupleScheme extends TupleScheme<clearAllActiveSlotRelationsToQueue_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clearAllActiveSlotRelationsToQueue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clearAllActiveSlotRelationsToQueue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
