/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.wso2.andes.thrift.slot.gen;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.nio.ByteBuffer;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

public class SlotManagementService {

  public interface Iface {

    public SlotInfo getSlotInfo(String storageQueueName, long nodeId) throws org.apache.thrift.TException;

    public void updateMessageId(String queueName, String nodeId, long startMessageId, long endMessageId, long
            localSafeZone) throws org.apache.thrift.TException;

    public void communicateQueueWiseSlot(ByteBuffer messageIdentifiers) throws org.apache.thrift.TException;

    public boolean deleteSlot(String queueName, SlotInfo slotInfo, String nodeId) throws org.apache.thrift.TException;

    public void reAssignSlotWhenNoSubscribers(String nodeId, String queueName) throws org.apache.thrift.TException;

    public long updateCurrentMessageIdForSafeZone(long messageId, String nodeId) throws org.apache.thrift.TException;

    /**
     * Delete all in-memory slot associations with a given queue. This is required to handle a queue purge event.
     * 
     * @param queueName name of destination queue
     * 
     * @param queueName
     */
    public void clearAllActiveSlotRelationsToQueue(String queueName) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getSlotInfo(String storageQueueName, long nodeId, org.apache.thrift.async
            .AsyncMethodCallback<AsyncClient.getSlotInfo_call> resultHandler) throws org.apache.thrift.TException;

    public void updateMessageId(String queueName, String nodeId, long startMessageId, long endMessageId, long
            localSafeZone, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateMessageId_call> resultHandler) throws org.apache.thrift.TException;

    public void communicateQueueWiseSlot(ByteBuffer messageIdentifiers, org.apache.thrift.async
            .AsyncMethodCallback<AsyncClient.communicateQueueWiseSlot_call> resultHandler) throws org.apache.thrift
            .TException;

    public void deleteSlot(String queueName, SlotInfo slotInfo, String nodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteSlot_call> resultHandler) throws org.apache.thrift.TException;

    public void reAssignSlotWhenNoSubscribers(String nodeId, String queueName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.reAssignSlotWhenNoSubscribers_call> resultHandler) throws org.apache.thrift.TException;

    public void updateCurrentMessageIdForSafeZone(long messageId, String nodeId, org.apache.thrift.async
            .AsyncMethodCallback<AsyncClient.updateCurrentMessageIdForSafeZone_call> resultHandler) throws org.apache
            .thrift.TException;

    public void clearAllActiveSlotRelationsToQueue(String queueName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.clearAllActiveSlotRelationsToQueue_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public SlotInfo getSlotInfo(String storageQueueName, long nodeId) throws org.apache.thrift.TException
    {
      send_getSlotInfo(storageQueueName, nodeId);
      return recv_getSlotInfo();
    }

    public void send_getSlotInfo(String storageQueueName, long nodeId) throws org.apache.thrift.TException
    {
      getSlotInfo_args args = new getSlotInfo_args();
      args.setStorageQueueName(storageQueueName);
      args.setNodeId(nodeId);
      sendBase("getSlotInfo", args);
    }

    public SlotInfo recv_getSlotInfo() throws org.apache.thrift.TException
    {
      getSlotInfo_result result = new getSlotInfo_result();
      receiveBase(result, "getSlotInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSlotInfo failed: unknown result");
    }

    public void updateMessageId(String queueName, String nodeId, long startMessageId, long endMessageId, long localSafeZone) throws org.apache.thrift.TException
    {
      send_updateMessageId(queueName, nodeId, startMessageId, endMessageId, localSafeZone);
      recv_updateMessageId();
    }

    public void send_updateMessageId(String queueName, String nodeId, long startMessageId, long endMessageId, long localSafeZone) throws org.apache.thrift.TException
    {
      updateMessageId_args args = new updateMessageId_args();
      args.setQueueName(queueName);
      args.setNodeId(nodeId);
      args.setStartMessageId(startMessageId);
      args.setEndMessageId(endMessageId);
      args.setLocalSafeZone(localSafeZone);
      sendBase("updateMessageId", args);
    }

    public void recv_updateMessageId() throws org.apache.thrift.TException
    {
      updateMessageId_result result = new updateMessageId_result();
      receiveBase(result, "updateMessageId");
      return;
    }

    public void communicateQueueWiseSlot(ByteBuffer messageIdentifiers) throws org.apache.thrift.TException
    {
      send_communicateQueueWiseSlot(messageIdentifiers);
      recv_communicateQueueWiseSlot();
    }

    public void send_communicateQueueWiseSlot(ByteBuffer messageIdentifiers) throws org.apache.thrift.TException
    {
      communicateQueueWiseSlot_args args = new communicateQueueWiseSlot_args();
      args.setMessageIdentifiers(messageIdentifiers);
      sendBase("communicateQueueWiseSlot", args);
    }

    public void recv_communicateQueueWiseSlot() throws org.apache.thrift.TException
    {
      communicateQueueWiseSlot_result result = new communicateQueueWiseSlot_result();
      receiveBase(result, "communicateQueueWiseSlot");
      return;
    }

    public boolean deleteSlot(String queueName, SlotInfo slotInfo, String nodeId) throws org.apache.thrift.TException
    {
      send_deleteSlot(queueName, slotInfo, nodeId);
      return recv_deleteSlot();
    }

    public void send_deleteSlot(String queueName, SlotInfo slotInfo, String nodeId) throws org.apache.thrift.TException
    {
      deleteSlot_args args = new deleteSlot_args();
      args.setQueueName(queueName);
      args.setSlotInfo(slotInfo);
      args.setNodeId(nodeId);
      sendBase("deleteSlot", args);
    }

    public boolean recv_deleteSlot() throws org.apache.thrift.TException
    {
      deleteSlot_result result = new deleteSlot_result();
      receiveBase(result, "deleteSlot");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteSlot failed: unknown result");
    }

    public void reAssignSlotWhenNoSubscribers(String nodeId, String queueName) throws org.apache.thrift.TException
    {
      send_reAssignSlotWhenNoSubscribers(nodeId, queueName);
      recv_reAssignSlotWhenNoSubscribers();
    }

    public void send_reAssignSlotWhenNoSubscribers(String nodeId, String queueName) throws org.apache.thrift.TException
    {
      reAssignSlotWhenNoSubscribers_args args = new reAssignSlotWhenNoSubscribers_args();
      args.setNodeId(nodeId);
      args.setQueueName(queueName);
      sendBase("reAssignSlotWhenNoSubscribers", args);
    }

    public void recv_reAssignSlotWhenNoSubscribers() throws org.apache.thrift.TException
    {
      reAssignSlotWhenNoSubscribers_result result = new reAssignSlotWhenNoSubscribers_result();
      receiveBase(result, "reAssignSlotWhenNoSubscribers");
      return;
    }

    public long updateCurrentMessageIdForSafeZone(long messageId, String nodeId) throws org.apache.thrift.TException
    {
      send_updateCurrentMessageIdForSafeZone(messageId, nodeId);
      return recv_updateCurrentMessageIdForSafeZone();
    }

    public void send_updateCurrentMessageIdForSafeZone(long messageId, String nodeId) throws org.apache.thrift.TException
    {
      updateCurrentMessageIdForSafeZone_args args = new updateCurrentMessageIdForSafeZone_args();
      args.setMessageId(messageId);
      args.setNodeId(nodeId);
      sendBase("updateCurrentMessageIdForSafeZone", args);
    }

    public long recv_updateCurrentMessageIdForSafeZone() throws org.apache.thrift.TException
    {
      updateCurrentMessageIdForSafeZone_result result = new updateCurrentMessageIdForSafeZone_result();
      receiveBase(result, "updateCurrentMessageIdForSafeZone");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateCurrentMessageIdForSafeZone failed: unknown result");
    }

    public void clearAllActiveSlotRelationsToQueue(String queueName) throws org.apache.thrift.TException
    {
      send_clearAllActiveSlotRelationsToQueue(queueName);
      recv_clearAllActiveSlotRelationsToQueue();
    }

    public void send_clearAllActiveSlotRelationsToQueue(String queueName) throws org.apache.thrift.TException
    {
      clearAllActiveSlotRelationsToQueue_args args = new clearAllActiveSlotRelationsToQueue_args();
      args.setQueueName(queueName);
      sendBase("clearAllActiveSlotRelationsToQueue", args);
    }

    public void recv_clearAllActiveSlotRelationsToQueue() throws org.apache.thrift.TException
    {
      clearAllActiveSlotRelationsToQueue_result result = new clearAllActiveSlotRelationsToQueue_result();
      receiveBase(result, "clearAllActiveSlotRelationsToQueue");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getSlotInfo(String storageQueueName, long nodeId, org.apache.thrift.async.AsyncMethodCallback<getSlotInfo_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSlotInfo_call method_call = new getSlotInfo_call(storageQueueName, nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSlotInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String storageQueueName;
      private long nodeId;
      public getSlotInfo_call(String storageQueueName, long nodeId, org.apache.thrift.async.AsyncMethodCallback<getSlotInfo_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.storageQueueName = storageQueueName;
        this.nodeId = nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSlotInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSlotInfo_args args = new getSlotInfo_args();
        args.setStorageQueueName(storageQueueName);
        args.setNodeId(nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SlotInfo getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSlotInfo();
      }
    }

    public void updateMessageId(String queueName, String nodeId, long startMessageId, long endMessageId, long localSafeZone, org.apache.thrift.async.AsyncMethodCallback<updateMessageId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateMessageId_call method_call = new updateMessageId_call(queueName, nodeId, startMessageId, endMessageId, localSafeZone, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateMessageId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String queueName;
      private String nodeId;
      private long startMessageId;
      private long endMessageId;
      private long localSafeZone;
      public updateMessageId_call(String queueName, String nodeId, long startMessageId, long endMessageId, long localSafeZone, org.apache.thrift.async.AsyncMethodCallback<updateMessageId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.queueName = queueName;
        this.nodeId = nodeId;
        this.startMessageId = startMessageId;
        this.endMessageId = endMessageId;
        this.localSafeZone = localSafeZone;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateMessageId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateMessageId_args args = new updateMessageId_args();
        args.setQueueName(queueName);
        args.setNodeId(nodeId);
        args.setStartMessageId(startMessageId);
        args.setEndMessageId(endMessageId);
        args.setLocalSafeZone(localSafeZone);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateMessageId();
      }
    }

    public void communicateQueueWiseSlot(ByteBuffer messageIdentifiers, org.apache.thrift.async.AsyncMethodCallback<communicateQueueWiseSlot_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      communicateQueueWiseSlot_call method_call = new communicateQueueWiseSlot_call(messageIdentifiers, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class communicateQueueWiseSlot_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ByteBuffer messageIdentifiers;
      public communicateQueueWiseSlot_call(ByteBuffer messageIdentifiers, org.apache.thrift.async.AsyncMethodCallback<communicateQueueWiseSlot_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.messageIdentifiers = messageIdentifiers;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("communicateQueueWiseSlot", org.apache.thrift.protocol.TMessageType.CALL, 0));
        communicateQueueWiseSlot_args args = new communicateQueueWiseSlot_args();
        args.setMessageIdentifiers(messageIdentifiers);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_communicateQueueWiseSlot();
      }
    }

    public void deleteSlot(String queueName, SlotInfo slotInfo, String nodeId, org.apache.thrift.async.AsyncMethodCallback<deleteSlot_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteSlot_call method_call = new deleteSlot_call(queueName, slotInfo, nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteSlot_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String queueName;
      private SlotInfo slotInfo;
      private String nodeId;
      public deleteSlot_call(String queueName, SlotInfo slotInfo, String nodeId, org.apache.thrift.async.AsyncMethodCallback<deleteSlot_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.queueName = queueName;
        this.slotInfo = slotInfo;
        this.nodeId = nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteSlot", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteSlot_args args = new deleteSlot_args();
        args.setQueueName(queueName);
        args.setSlotInfo(slotInfo);
        args.setNodeId(nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteSlot();
      }
    }

    public void reAssignSlotWhenNoSubscribers(String nodeId, String queueName, org.apache.thrift.async.AsyncMethodCallback<reAssignSlotWhenNoSubscribers_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reAssignSlotWhenNoSubscribers_call method_call = new reAssignSlotWhenNoSubscribers_call(nodeId, queueName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reAssignSlotWhenNoSubscribers_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String nodeId;
      private String queueName;
      public reAssignSlotWhenNoSubscribers_call(String nodeId, String queueName, org.apache.thrift.async.AsyncMethodCallback<reAssignSlotWhenNoSubscribers_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeId = nodeId;
        this.queueName = queueName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reAssignSlotWhenNoSubscribers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reAssignSlotWhenNoSubscribers_args args = new reAssignSlotWhenNoSubscribers_args();
        args.setNodeId(nodeId);
        args.setQueueName(queueName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_reAssignSlotWhenNoSubscribers();
      }
    }

    public void updateCurrentMessageIdForSafeZone(long messageId, String nodeId, org.apache.thrift.async.AsyncMethodCallback<updateCurrentMessageIdForSafeZone_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateCurrentMessageIdForSafeZone_call method_call = new updateCurrentMessageIdForSafeZone_call(messageId, nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateCurrentMessageIdForSafeZone_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long messageId;
      private String nodeId;
      public updateCurrentMessageIdForSafeZone_call(long messageId, String nodeId, org.apache.thrift.async.AsyncMethodCallback<updateCurrentMessageIdForSafeZone_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.messageId = messageId;
        this.nodeId = nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCurrentMessageIdForSafeZone", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateCurrentMessageIdForSafeZone_args args = new updateCurrentMessageIdForSafeZone_args();
        args.setMessageId(messageId);
        args.setNodeId(nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateCurrentMessageIdForSafeZone();
      }
    }

    public void clearAllActiveSlotRelationsToQueue(String queueName, org.apache.thrift.async.AsyncMethodCallback<clearAllActiveSlotRelationsToQueue_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      clearAllActiveSlotRelationsToQueue_call method_call = new clearAllActiveSlotRelationsToQueue_call(queueName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class clearAllActiveSlotRelationsToQueue_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String queueName;
      public clearAllActiveSlotRelationsToQueue_call(String queueName, org.apache.thrift.async.AsyncMethodCallback<clearAllActiveSlotRelationsToQueue_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.queueName = queueName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("clearAllActiveSlotRelationsToQueue", org.apache.thrift.protocol.TMessageType.CALL, 0));
        clearAllActiveSlotRelationsToQueue_args args = new clearAllActiveSlotRelationsToQueue_args();
        args.setQueueName(queueName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_clearAllActiveSlotRelationsToQueue();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getSlotInfo", new getSlotInfo());
      processMap.put("updateMessageId", new updateMessageId());
      processMap.put("communicateQueueWiseSlot", new communicateQueueWiseSlot());
      processMap.put("deleteSlot", new deleteSlot());
      processMap.put("reAssignSlotWhenNoSubscribers", new reAssignSlotWhenNoSubscribers());
      processMap.put("updateCurrentMessageIdForSafeZone", new updateCurrentMessageIdForSafeZone());
      processMap.put("clearAllActiveSlotRelationsToQueue", new clearAllActiveSlotRelationsToQueue());
      return processMap;
    }

    private static class getSlotInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSlotInfo_args> {
      public getSlotInfo() {
        super("getSlotInfo");
      }

      public getSlotInfo_args getEmptyArgsInstance() {
        return new getSlotInfo_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      public getSlotInfo_result getResult(I iface, getSlotInfo_args args) throws org.apache.thrift.TException {
        getSlotInfo_result result = new getSlotInfo_result();
        result.success = iface.getSlotInfo(args.storageQueueName, args.nodeId);
        return result;
      }
    }

    private static class updateMessageId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateMessageId_args> {
      public updateMessageId() {
        super("updateMessageId");
      }

      public updateMessageId_args getEmptyArgsInstance() {
        return new updateMessageId_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      public updateMessageId_result getResult(I iface, updateMessageId_args args) throws org.apache.thrift.TException {
        updateMessageId_result result = new updateMessageId_result();
        iface.updateMessageId(args.queueName, args.nodeId, args.startMessageId, args.endMessageId, args.localSafeZone);
        return result;
      }
    }

    private static class communicateQueueWiseSlot<I extends Iface> extends org.apache.thrift.ProcessFunction<I, communicateQueueWiseSlot_args> {
      public communicateQueueWiseSlot() {
        super("communicateQueueWiseSlot");
      }

      public communicateQueueWiseSlot_args getEmptyArgsInstance() {
        return new communicateQueueWiseSlot_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      public communicateQueueWiseSlot_result getResult(I iface, communicateQueueWiseSlot_args args) throws org.apache.thrift.TException {
        communicateQueueWiseSlot_result result = new communicateQueueWiseSlot_result();
        iface.communicateQueueWiseSlot(args.messageIdentifiers);
        return result;
      }
    }

    private static class deleteSlot<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteSlot_args> {
      public deleteSlot() {
        super("deleteSlot");
      }

      public deleteSlot_args getEmptyArgsInstance() {
        return new deleteSlot_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      public deleteSlot_result getResult(I iface, deleteSlot_args args) throws org.apache.thrift.TException {
        deleteSlot_result result = new deleteSlot_result();
        result.success = iface.deleteSlot(args.queueName, args.slotInfo, args.nodeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class reAssignSlotWhenNoSubscribers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reAssignSlotWhenNoSubscribers_args> {
      public reAssignSlotWhenNoSubscribers() {
        super("reAssignSlotWhenNoSubscribers");
      }

      public reAssignSlotWhenNoSubscribers_args getEmptyArgsInstance() {
        return new reAssignSlotWhenNoSubscribers_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      public reAssignSlotWhenNoSubscribers_result getResult(I iface, reAssignSlotWhenNoSubscribers_args args) throws org.apache.thrift.TException {
        reAssignSlotWhenNoSubscribers_result result = new reAssignSlotWhenNoSubscribers_result();
        iface.reAssignSlotWhenNoSubscribers(args.nodeId, args.queueName);
        return result;
      }
    }

    private static class updateCurrentMessageIdForSafeZone<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCurrentMessageIdForSafeZone_args> {
      public updateCurrentMessageIdForSafeZone() {
        super("updateCurrentMessageIdForSafeZone");
      }

      public updateCurrentMessageIdForSafeZone_args getEmptyArgsInstance() {
        return new updateCurrentMessageIdForSafeZone_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      public updateCurrentMessageIdForSafeZone_result getResult(I iface, updateCurrentMessageIdForSafeZone_args args) throws org.apache.thrift.TException {
        updateCurrentMessageIdForSafeZone_result result = new updateCurrentMessageIdForSafeZone_result();
        result.success = iface.updateCurrentMessageIdForSafeZone(args.messageId, args.nodeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class clearAllActiveSlotRelationsToQueue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, clearAllActiveSlotRelationsToQueue_args> {
      public clearAllActiveSlotRelationsToQueue() {
        super("clearAllActiveSlotRelationsToQueue");
      }

      public clearAllActiveSlotRelationsToQueue_args getEmptyArgsInstance() {
        return new clearAllActiveSlotRelationsToQueue_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      public clearAllActiveSlotRelationsToQueue_result getResult(I iface, clearAllActiveSlotRelationsToQueue_args args) throws org.apache.thrift.TException {
        clearAllActiveSlotRelationsToQueue_result result = new clearAllActiveSlotRelationsToQueue_result();
        iface.clearAllActiveSlotRelationsToQueue(args.queueName);
        return result;
      }
    }

  }

  public static class getSlotInfo_args implements org.apache.thrift.TBase<getSlotInfo_args, getSlotInfo_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSlotInfo_args");

    private static final org.apache.thrift.protocol.TField STORAGE_QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("storageQueueName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.I64, (short)2);

    public String storageQueueName; // required
    public long nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STORAGE_QUEUE_NAME((short)1, "storageQueueName"),
      NODE_ID((short)2, "nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STORAGE_QUEUE_NAME
            return STORAGE_QUEUE_NAME;
          case 2: // NODE_ID
            return NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NODEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STORAGE_QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("storageQueueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSlotInfo_args.class, metaDataMap);
    }

    public getSlotInfo_args() {
    }

    public getSlotInfo_args(
      String storageQueueName,
      long nodeId)
    {
      this();
      this.storageQueueName = storageQueueName;
      this.nodeId = nodeId;
      setNodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSlotInfo_args(getSlotInfo_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetStorageQueueName()) {
        this.storageQueueName = other.storageQueueName;
      }
      this.nodeId = other.nodeId;
    }

    public getSlotInfo_args deepCopy() {
      return new getSlotInfo_args(this);
    }

    @Override
    public void clear() {
      this.storageQueueName = null;
      setNodeIdIsSet(false);
      this.nodeId = 0;
    }

    public String getStorageQueueName() {
      return this.storageQueueName;
    }

    public getSlotInfo_args setStorageQueueName(String storageQueueName) {
      this.storageQueueName = storageQueueName;
      return this;
    }

    public void unsetStorageQueueName() {
      this.storageQueueName = null;
    }

    /** Returns true if field storageQueueName is set (has been assigned a value) and false otherwise */
    public boolean isSetStorageQueueName() {
      return this.storageQueueName != null;
    }

    public void setStorageQueueNameIsSet(boolean value) {
      if (!value) {
        this.storageQueueName = null;
      }
    }

    public long getNodeId() {
      return this.nodeId;
    }

    public getSlotInfo_args setNodeId(long nodeId) {
      this.nodeId = nodeId;
      setNodeIdIsSet(true);
      return this;
    }

    public void unsetNodeId() {
      __isset_bit_vector.clear(__NODEID_ISSET_ID);
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return __isset_bit_vector.get(__NODEID_ISSET_ID);
    }

    public void setNodeIdIsSet(boolean value) {
      __isset_bit_vector.set(__NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STORAGE_QUEUE_NAME:
        if (value == null) {
          unsetStorageQueueName();
        } else {
          setStorageQueueName((String)value);
        }
        break;

      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STORAGE_QUEUE_NAME:
        return getStorageQueueName();

      case NODE_ID:
        return Long.valueOf(getNodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STORAGE_QUEUE_NAME:
        return isSetStorageQueueName();
      case NODE_ID:
        return isSetNodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSlotInfo_args)
        return this.equals((getSlotInfo_args)that);
      return false;
    }

    public boolean equals(getSlotInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_storageQueueName = true && this.isSetStorageQueueName();
      boolean that_present_storageQueueName = true && that.isSetStorageQueueName();
      if (this_present_storageQueueName || that_present_storageQueueName) {
        if (!(this_present_storageQueueName && that_present_storageQueueName))
          return false;
        if (!this.storageQueueName.equals(that.storageQueueName))
          return false;
      }

      boolean this_present_nodeId = true;
      boolean that_present_nodeId = true;
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (this.nodeId != that.nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSlotInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSlotInfo_args typedOther = (getSlotInfo_args)other;

      lastComparison = Boolean.valueOf(isSetStorageQueueName()).compareTo(typedOther.isSetStorageQueueName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStorageQueueName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storageQueueName, typedOther.storageQueueName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(typedOther.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, typedOther.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // STORAGE_QUEUE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.storageQueueName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NODE_ID
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.nodeId = iprot.readI64();
              setNodeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.storageQueueName != null) {
        oprot.writeFieldBegin(STORAGE_QUEUE_NAME_FIELD_DESC);
        oprot.writeString(this.storageQueueName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
      oprot.writeI64(this.nodeId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSlotInfo_args(");
      boolean first = true;

      sb.append("storageQueueName:");
      if (this.storageQueueName == null) {
        sb.append("null");
      } else {
        sb.append(this.storageQueueName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeId:");
      sb.append(this.nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getSlotInfo_result implements org.apache.thrift.TBase<getSlotInfo_result, getSlotInfo_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSlotInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    public SlotInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SlotInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSlotInfo_result.class, metaDataMap);
    }

    public getSlotInfo_result() {
    }

    public getSlotInfo_result(
      SlotInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSlotInfo_result(getSlotInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new SlotInfo(other.success);
      }
    }

    public getSlotInfo_result deepCopy() {
      return new getSlotInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public SlotInfo getSuccess() {
      return this.success;
    }

    public getSlotInfo_result setSuccess(SlotInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SlotInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSlotInfo_result)
        return this.equals((getSlotInfo_result)that);
      return false;
    }

    public boolean equals(getSlotInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSlotInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSlotInfo_result typedOther = (getSlotInfo_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new SlotInfo();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSlotInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class updateMessageId_args implements org.apache.thrift.TBase<updateMessageId_args, updateMessageId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMessageId_args");

    private static final org.apache.thrift.protocol.TField QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queueName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField START_MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("startMessageId", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField END_MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("endMessageId", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField LOCAL_SAFE_ZONE_FIELD_DESC = new org.apache.thrift.protocol.TField("localSafeZone", org.apache.thrift.protocol.TType.I64, (short)5);

    public String queueName; // required
    public String nodeId; // required
    public long startMessageId; // required
    public long endMessageId; // required
    public long localSafeZone; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUEUE_NAME((short)1, "queueName"),
      NODE_ID((short)2, "nodeId"),
      START_MESSAGE_ID((short)3, "startMessageId"),
      END_MESSAGE_ID((short)4, "endMessageId"),
      LOCAL_SAFE_ZONE((short)5, "localSafeZone");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUEUE_NAME
            return QUEUE_NAME;
          case 2: // NODE_ID
            return NODE_ID;
          case 3: // START_MESSAGE_ID
            return START_MESSAGE_ID;
          case 4: // END_MESSAGE_ID
            return END_MESSAGE_ID;
          case 5: // LOCAL_SAFE_ZONE
            return LOCAL_SAFE_ZONE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STARTMESSAGEID_ISSET_ID = 0;
    private static final int __ENDMESSAGEID_ISSET_ID = 1;
    private static final int __LOCALSAFEZONE_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("queueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("startMessageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("endMessageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LOCAL_SAFE_ZONE, new org.apache.thrift.meta_data.FieldMetaData("localSafeZone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMessageId_args.class, metaDataMap);
    }

    public updateMessageId_args() {
    }

    public updateMessageId_args(
      String queueName,
      String nodeId,
      long startMessageId,
      long endMessageId,
      long localSafeZone)
    {
      this();
      this.queueName = queueName;
      this.nodeId = nodeId;
      this.startMessageId = startMessageId;
      setStartMessageIdIsSet(true);
      this.endMessageId = endMessageId;
      setEndMessageIdIsSet(true);
      this.localSafeZone = localSafeZone;
      setLocalSafeZoneIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMessageId_args(updateMessageId_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetQueueName()) {
        this.queueName = other.queueName;
      }
      if (other.isSetNodeId()) {
        this.nodeId = other.nodeId;
      }
      this.startMessageId = other.startMessageId;
      this.endMessageId = other.endMessageId;
      this.localSafeZone = other.localSafeZone;
    }

    public updateMessageId_args deepCopy() {
      return new updateMessageId_args(this);
    }

    @Override
    public void clear() {
      this.queueName = null;
      this.nodeId = null;
      setStartMessageIdIsSet(false);
      this.startMessageId = 0;
      setEndMessageIdIsSet(false);
      this.endMessageId = 0;
      setLocalSafeZoneIsSet(false);
      this.localSafeZone = 0;
    }

    public String getQueueName() {
      return this.queueName;
    }

    public updateMessageId_args setQueueName(String queueName) {
      this.queueName = queueName;
      return this;
    }

    public void unsetQueueName() {
      this.queueName = null;
    }

    /** Returns true if field queueName is set (has been assigned a value) and false otherwise */
    public boolean isSetQueueName() {
      return this.queueName != null;
    }

    public void setQueueNameIsSet(boolean value) {
      if (!value) {
        this.queueName = null;
      }
    }

    public String getNodeId() {
      return this.nodeId;
    }

    public updateMessageId_args setNodeId(String nodeId) {
      this.nodeId = nodeId;
      return this;
    }

    public void unsetNodeId() {
      this.nodeId = null;
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return this.nodeId != null;
    }

    public void setNodeIdIsSet(boolean value) {
      if (!value) {
        this.nodeId = null;
      }
    }

    public long getStartMessageId() {
      return this.startMessageId;
    }

    public updateMessageId_args setStartMessageId(long startMessageId) {
      this.startMessageId = startMessageId;
      setStartMessageIdIsSet(true);
      return this;
    }

    public void unsetStartMessageId() {
      __isset_bit_vector.clear(__STARTMESSAGEID_ISSET_ID);
    }

    /** Returns true if field startMessageId is set (has been assigned a value) and false otherwise */
    public boolean isSetStartMessageId() {
      return __isset_bit_vector.get(__STARTMESSAGEID_ISSET_ID);
    }

    public void setStartMessageIdIsSet(boolean value) {
      __isset_bit_vector.set(__STARTMESSAGEID_ISSET_ID, value);
    }

    public long getEndMessageId() {
      return this.endMessageId;
    }

    public updateMessageId_args setEndMessageId(long endMessageId) {
      this.endMessageId = endMessageId;
      setEndMessageIdIsSet(true);
      return this;
    }

    public void unsetEndMessageId() {
      __isset_bit_vector.clear(__ENDMESSAGEID_ISSET_ID);
    }

    /** Returns true if field endMessageId is set (has been assigned a value) and false otherwise */
    public boolean isSetEndMessageId() {
      return __isset_bit_vector.get(__ENDMESSAGEID_ISSET_ID);
    }

    public void setEndMessageIdIsSet(boolean value) {
      __isset_bit_vector.set(__ENDMESSAGEID_ISSET_ID, value);
    }

    public long getLocalSafeZone() {
      return this.localSafeZone;
    }

    public updateMessageId_args setLocalSafeZone(long localSafeZone) {
      this.localSafeZone = localSafeZone;
      setLocalSafeZoneIsSet(true);
      return this;
    }

    public void unsetLocalSafeZone() {
      __isset_bit_vector.clear(__LOCALSAFEZONE_ISSET_ID);
    }

    /** Returns true if field localSafeZone is set (has been assigned a value) and false otherwise */
    public boolean isSetLocalSafeZone() {
      return __isset_bit_vector.get(__LOCALSAFEZONE_ISSET_ID);
    }

    public void setLocalSafeZoneIsSet(boolean value) {
      __isset_bit_vector.set(__LOCALSAFEZONE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUEUE_NAME:
        if (value == null) {
          unsetQueueName();
        } else {
          setQueueName((String)value);
        }
        break;

      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((String)value);
        }
        break;

      case START_MESSAGE_ID:
        if (value == null) {
          unsetStartMessageId();
        } else {
          setStartMessageId((Long)value);
        }
        break;

      case END_MESSAGE_ID:
        if (value == null) {
          unsetEndMessageId();
        } else {
          setEndMessageId((Long)value);
        }
        break;

      case LOCAL_SAFE_ZONE:
        if (value == null) {
          unsetLocalSafeZone();
        } else {
          setLocalSafeZone((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUEUE_NAME:
        return getQueueName();

      case NODE_ID:
        return getNodeId();

      case START_MESSAGE_ID:
        return Long.valueOf(getStartMessageId());

      case END_MESSAGE_ID:
        return Long.valueOf(getEndMessageId());

      case LOCAL_SAFE_ZONE:
        return Long.valueOf(getLocalSafeZone());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUEUE_NAME:
        return isSetQueueName();
      case NODE_ID:
        return isSetNodeId();
      case START_MESSAGE_ID:
        return isSetStartMessageId();
      case END_MESSAGE_ID:
        return isSetEndMessageId();
      case LOCAL_SAFE_ZONE:
        return isSetLocalSafeZone();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMessageId_args)
        return this.equals((updateMessageId_args)that);
      return false;
    }

    public boolean equals(updateMessageId_args that) {
      if (that == null)
        return false;

      boolean this_present_queueName = true && this.isSetQueueName();
      boolean that_present_queueName = true && that.isSetQueueName();
      if (this_present_queueName || that_present_queueName) {
        if (!(this_present_queueName && that_present_queueName))
          return false;
        if (!this.queueName.equals(that.queueName))
          return false;
      }

      boolean this_present_nodeId = true && this.isSetNodeId();
      boolean that_present_nodeId = true && that.isSetNodeId();
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (!this.nodeId.equals(that.nodeId))
          return false;
      }

      boolean this_present_startMessageId = true;
      boolean that_present_startMessageId = true;
      if (this_present_startMessageId || that_present_startMessageId) {
        if (!(this_present_startMessageId && that_present_startMessageId))
          return false;
        if (this.startMessageId != that.startMessageId)
          return false;
      }

      boolean this_present_endMessageId = true;
      boolean that_present_endMessageId = true;
      if (this_present_endMessageId || that_present_endMessageId) {
        if (!(this_present_endMessageId && that_present_endMessageId))
          return false;
        if (this.endMessageId != that.endMessageId)
          return false;
      }

      boolean this_present_localSafeZone = true;
      boolean that_present_localSafeZone = true;
      if (this_present_localSafeZone || that_present_localSafeZone) {
        if (!(this_present_localSafeZone && that_present_localSafeZone))
          return false;
        if (this.localSafeZone != that.localSafeZone)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateMessageId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateMessageId_args typedOther = (updateMessageId_args)other;

      lastComparison = Boolean.valueOf(isSetQueueName()).compareTo(typedOther.isSetQueueName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueueName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueName, typedOther.queueName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(typedOther.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, typedOther.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartMessageId()).compareTo(typedOther.isSetStartMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartMessageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startMessageId, typedOther.startMessageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndMessageId()).compareTo(typedOther.isSetEndMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndMessageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endMessageId, typedOther.endMessageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLocalSafeZone()).compareTo(typedOther.isSetLocalSafeZone());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocalSafeZone()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localSafeZone, typedOther.localSafeZone);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // QUEUE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.queueName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NODE_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.nodeId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // START_MESSAGE_ID
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.startMessageId = iprot.readI64();
              setStartMessageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // END_MESSAGE_ID
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.endMessageId = iprot.readI64();
              setEndMessageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // LOCAL_SAFE_ZONE
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.localSafeZone = iprot.readI64();
              setLocalSafeZoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.queueName != null) {
        oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
        oprot.writeString(this.queueName);
        oprot.writeFieldEnd();
      }
      if (this.nodeId != null) {
        oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
        oprot.writeString(this.nodeId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_MESSAGE_ID_FIELD_DESC);
      oprot.writeI64(this.startMessageId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_MESSAGE_ID_FIELD_DESC);
      oprot.writeI64(this.endMessageId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCAL_SAFE_ZONE_FIELD_DESC);
      oprot.writeI64(this.localSafeZone);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMessageId_args(");
      boolean first = true;

      sb.append("queueName:");
      if (this.queueName == null) {
        sb.append("null");
      } else {
        sb.append(this.queueName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeId:");
      if (this.nodeId == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startMessageId:");
      sb.append(this.startMessageId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endMessageId:");
      sb.append(this.endMessageId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("localSafeZone:");
      sb.append(this.localSafeZone);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class updateMessageId_result implements org.apache.thrift.TBase<updateMessageId_result, updateMessageId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMessageId_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMessageId_result.class, metaDataMap);
    }

    public updateMessageId_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMessageId_result(updateMessageId_result other) {
    }

    public updateMessageId_result deepCopy() {
      return new updateMessageId_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMessageId_result)
        return this.equals((updateMessageId_result)that);
      return false;
    }

    public boolean equals(updateMessageId_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateMessageId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateMessageId_result typedOther = (updateMessageId_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMessageId_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class communicateQueueWiseSlot_args implements org.apache.thrift.TBase<communicateQueueWiseSlot_args, communicateQueueWiseSlot_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("communicateQueueWiseSlot_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_IDENTIFIERS_FIELD_DESC = new org.apache.thrift.protocol.TField("messageIdentifiers", org.apache.thrift.protocol.TType.STRING, (short)1);

    public ByteBuffer messageIdentifiers; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE_IDENTIFIERS((short)1, "messageIdentifiers");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE_IDENTIFIERS
            return MESSAGE_IDENTIFIERS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE_IDENTIFIERS, new org.apache.thrift.meta_data.FieldMetaData("messageIdentifiers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(communicateQueueWiseSlot_args.class, metaDataMap);
    }

    public communicateQueueWiseSlot_args() {
    }

    public communicateQueueWiseSlot_args(
      ByteBuffer messageIdentifiers)
    {
      this();
      this.messageIdentifiers = messageIdentifiers;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public communicateQueueWiseSlot_args(communicateQueueWiseSlot_args other) {
      if (other.isSetMessageIdentifiers()) {
        this.messageIdentifiers = org.apache.thrift.TBaseHelper.copyBinary(other.messageIdentifiers);
;
      }
    }

    public communicateQueueWiseSlot_args deepCopy() {
      return new communicateQueueWiseSlot_args(this);
    }

    @Override
    public void clear() {
      this.messageIdentifiers = null;
    }

    public byte[] getMessageIdentifiers() {
      setMessageIdentifiers(org.apache.thrift.TBaseHelper.rightSize(messageIdentifiers));
      return messageIdentifiers == null ? null : messageIdentifiers.array();
    }

    public ByteBuffer bufferForMessageIdentifiers() {
      return messageIdentifiers;
    }

    public communicateQueueWiseSlot_args setMessageIdentifiers(byte[] messageIdentifiers) {
      setMessageIdentifiers(messageIdentifiers == null ? (ByteBuffer)null : ByteBuffer.wrap(messageIdentifiers));
      return this;
    }

    public communicateQueueWiseSlot_args setMessageIdentifiers(ByteBuffer messageIdentifiers) {
      this.messageIdentifiers = messageIdentifiers;
      return this;
    }

    public void unsetMessageIdentifiers() {
      this.messageIdentifiers = null;
    }

    /** Returns true if field messageIdentifiers is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageIdentifiers() {
      return this.messageIdentifiers != null;
    }

    public void setMessageIdentifiersIsSet(boolean value) {
      if (!value) {
        this.messageIdentifiers = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MESSAGE_IDENTIFIERS:
        if (value == null) {
          unsetMessageIdentifiers();
        } else {
          setMessageIdentifiers((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE_IDENTIFIERS:
        return getMessageIdentifiers();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE_IDENTIFIERS:
        return isSetMessageIdentifiers();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof communicateQueueWiseSlot_args)
        return this.equals((communicateQueueWiseSlot_args)that);
      return false;
    }

    public boolean equals(communicateQueueWiseSlot_args that) {
      if (that == null)
        return false;

      boolean this_present_messageIdentifiers = true && this.isSetMessageIdentifiers();
      boolean that_present_messageIdentifiers = true && that.isSetMessageIdentifiers();
      if (this_present_messageIdentifiers || that_present_messageIdentifiers) {
        if (!(this_present_messageIdentifiers && that_present_messageIdentifiers))
          return false;
        if (!this.messageIdentifiers.equals(that.messageIdentifiers))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(communicateQueueWiseSlot_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      communicateQueueWiseSlot_args typedOther = (communicateQueueWiseSlot_args)other;

      lastComparison = Boolean.valueOf(isSetMessageIdentifiers()).compareTo(typedOther.isSetMessageIdentifiers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageIdentifiers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageIdentifiers, typedOther.messageIdentifiers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MESSAGE_IDENTIFIERS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.messageIdentifiers = iprot.readBinary();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.messageIdentifiers != null) {
        oprot.writeFieldBegin(MESSAGE_IDENTIFIERS_FIELD_DESC);
        oprot.writeBinary(this.messageIdentifiers);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("communicateQueueWiseSlot_args(");
      boolean first = true;

      sb.append("messageIdentifiers:");
      if (this.messageIdentifiers == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.messageIdentifiers, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class communicateQueueWiseSlot_result implements org.apache.thrift.TBase<communicateQueueWiseSlot_result, communicateQueueWiseSlot_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("communicateQueueWiseSlot_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(communicateQueueWiseSlot_result.class, metaDataMap);
    }

    public communicateQueueWiseSlot_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public communicateQueueWiseSlot_result(communicateQueueWiseSlot_result other) {
    }

    public communicateQueueWiseSlot_result deepCopy() {
      return new communicateQueueWiseSlot_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof communicateQueueWiseSlot_result)
        return this.equals((communicateQueueWiseSlot_result)that);
      return false;
    }

    public boolean equals(communicateQueueWiseSlot_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(communicateQueueWiseSlot_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      communicateQueueWiseSlot_result typedOther = (communicateQueueWiseSlot_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("communicateQueueWiseSlot_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class deleteSlot_args implements org.apache.thrift.TBase<deleteSlot_args, deleteSlot_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSlot_args");

    private static final org.apache.thrift.protocol.TField QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queueName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SLOT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("slotInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.STRING, (short)3);

    public String queueName; // required
    public SlotInfo slotInfo; // required
    public String nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUEUE_NAME((short)1, "queueName"),
      SLOT_INFO((short)2, "slotInfo"),
      NODE_ID((short)3, "nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUEUE_NAME
            return QUEUE_NAME;
          case 2: // SLOT_INFO
            return SLOT_INFO;
          case 3: // NODE_ID
            return NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("queueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SLOT_INFO, new org.apache.thrift.meta_data.FieldMetaData("slotInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SlotInfo.class)));
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSlot_args.class, metaDataMap);
    }

    public deleteSlot_args() {
    }

    public deleteSlot_args(
      String queueName,
      SlotInfo slotInfo,
      String nodeId)
    {
      this();
      this.queueName = queueName;
      this.slotInfo = slotInfo;
      this.nodeId = nodeId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSlot_args(deleteSlot_args other) {
      if (other.isSetQueueName()) {
        this.queueName = other.queueName;
      }
      if (other.isSetSlotInfo()) {
        this.slotInfo = new SlotInfo(other.slotInfo);
      }
      if (other.isSetNodeId()) {
        this.nodeId = other.nodeId;
      }
    }

    public deleteSlot_args deepCopy() {
      return new deleteSlot_args(this);
    }

    @Override
    public void clear() {
      this.queueName = null;
      this.slotInfo = null;
      this.nodeId = null;
    }

    public String getQueueName() {
      return this.queueName;
    }

    public deleteSlot_args setQueueName(String queueName) {
      this.queueName = queueName;
      return this;
    }

    public void unsetQueueName() {
      this.queueName = null;
    }

    /** Returns true if field queueName is set (has been assigned a value) and false otherwise */
    public boolean isSetQueueName() {
      return this.queueName != null;
    }

    public void setQueueNameIsSet(boolean value) {
      if (!value) {
        this.queueName = null;
      }
    }

    public SlotInfo getSlotInfo() {
      return this.slotInfo;
    }

    public deleteSlot_args setSlotInfo(SlotInfo slotInfo) {
      this.slotInfo = slotInfo;
      return this;
    }

    public void unsetSlotInfo() {
      this.slotInfo = null;
    }

    /** Returns true if field slotInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetSlotInfo() {
      return this.slotInfo != null;
    }

    public void setSlotInfoIsSet(boolean value) {
      if (!value) {
        this.slotInfo = null;
      }
    }

    public String getNodeId() {
      return this.nodeId;
    }

    public deleteSlot_args setNodeId(String nodeId) {
      this.nodeId = nodeId;
      return this;
    }

    public void unsetNodeId() {
      this.nodeId = null;
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return this.nodeId != null;
    }

    public void setNodeIdIsSet(boolean value) {
      if (!value) {
        this.nodeId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUEUE_NAME:
        if (value == null) {
          unsetQueueName();
        } else {
          setQueueName((String)value);
        }
        break;

      case SLOT_INFO:
        if (value == null) {
          unsetSlotInfo();
        } else {
          setSlotInfo((SlotInfo)value);
        }
        break;

      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUEUE_NAME:
        return getQueueName();

      case SLOT_INFO:
        return getSlotInfo();

      case NODE_ID:
        return getNodeId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUEUE_NAME:
        return isSetQueueName();
      case SLOT_INFO:
        return isSetSlotInfo();
      case NODE_ID:
        return isSetNodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSlot_args)
        return this.equals((deleteSlot_args)that);
      return false;
    }

    public boolean equals(deleteSlot_args that) {
      if (that == null)
        return false;

      boolean this_present_queueName = true && this.isSetQueueName();
      boolean that_present_queueName = true && that.isSetQueueName();
      if (this_present_queueName || that_present_queueName) {
        if (!(this_present_queueName && that_present_queueName))
          return false;
        if (!this.queueName.equals(that.queueName))
          return false;
      }

      boolean this_present_slotInfo = true && this.isSetSlotInfo();
      boolean that_present_slotInfo = true && that.isSetSlotInfo();
      if (this_present_slotInfo || that_present_slotInfo) {
        if (!(this_present_slotInfo && that_present_slotInfo))
          return false;
        if (!this.slotInfo.equals(that.slotInfo))
          return false;
      }

      boolean this_present_nodeId = true && this.isSetNodeId();
      boolean that_present_nodeId = true && that.isSetNodeId();
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (!this.nodeId.equals(that.nodeId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteSlot_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteSlot_args typedOther = (deleteSlot_args)other;

      lastComparison = Boolean.valueOf(isSetQueueName()).compareTo(typedOther.isSetQueueName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueueName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueName, typedOther.queueName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSlotInfo()).compareTo(typedOther.isSetSlotInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSlotInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slotInfo, typedOther.slotInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(typedOther.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, typedOther.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // QUEUE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.queueName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SLOT_INFO
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.slotInfo = new SlotInfo();
              this.slotInfo.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NODE_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.nodeId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.queueName != null) {
        oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
        oprot.writeString(this.queueName);
        oprot.writeFieldEnd();
      }
      if (this.slotInfo != null) {
        oprot.writeFieldBegin(SLOT_INFO_FIELD_DESC);
        this.slotInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.nodeId != null) {
        oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
        oprot.writeString(this.nodeId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSlot_args(");
      boolean first = true;

      sb.append("queueName:");
      if (this.queueName == null) {
        sb.append("null");
      } else {
        sb.append(this.queueName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("slotInfo:");
      if (this.slotInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.slotInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeId:");
      if (this.nodeId == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class deleteSlot_result implements org.apache.thrift.TBase<deleteSlot_result, deleteSlot_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSlot_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSlot_result.class, metaDataMap);
    }

    public deleteSlot_result() {
    }

    public deleteSlot_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSlot_result(deleteSlot_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public deleteSlot_result deepCopy() {
      return new deleteSlot_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteSlot_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSlot_result)
        return this.equals((deleteSlot_result)that);
      return false;
    }

    public boolean equals(deleteSlot_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteSlot_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteSlot_result typedOther = (deleteSlot_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSlot_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class reAssignSlotWhenNoSubscribers_args implements org.apache.thrift.TBase<reAssignSlotWhenNoSubscribers_args, reAssignSlotWhenNoSubscribers_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reAssignSlotWhenNoSubscribers_args");

    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queueName", org.apache.thrift.protocol.TType.STRING, (short)2);

    public String nodeId; // required
    public String queueName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_ID((short)1, "nodeId"),
      QUEUE_NAME((short)2, "queueName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_ID
            return NODE_ID;
          case 2: // QUEUE_NAME
            return QUEUE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("queueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reAssignSlotWhenNoSubscribers_args.class, metaDataMap);
    }

    public reAssignSlotWhenNoSubscribers_args() {
    }

    public reAssignSlotWhenNoSubscribers_args(
      String nodeId,
      String queueName)
    {
      this();
      this.nodeId = nodeId;
      this.queueName = queueName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reAssignSlotWhenNoSubscribers_args(reAssignSlotWhenNoSubscribers_args other) {
      if (other.isSetNodeId()) {
        this.nodeId = other.nodeId;
      }
      if (other.isSetQueueName()) {
        this.queueName = other.queueName;
      }
    }

    public reAssignSlotWhenNoSubscribers_args deepCopy() {
      return new reAssignSlotWhenNoSubscribers_args(this);
    }

    @Override
    public void clear() {
      this.nodeId = null;
      this.queueName = null;
    }

    public String getNodeId() {
      return this.nodeId;
    }

    public reAssignSlotWhenNoSubscribers_args setNodeId(String nodeId) {
      this.nodeId = nodeId;
      return this;
    }

    public void unsetNodeId() {
      this.nodeId = null;
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return this.nodeId != null;
    }

    public void setNodeIdIsSet(boolean value) {
      if (!value) {
        this.nodeId = null;
      }
    }

    public String getQueueName() {
      return this.queueName;
    }

    public reAssignSlotWhenNoSubscribers_args setQueueName(String queueName) {
      this.queueName = queueName;
      return this;
    }

    public void unsetQueueName() {
      this.queueName = null;
    }

    /** Returns true if field queueName is set (has been assigned a value) and false otherwise */
    public boolean isSetQueueName() {
      return this.queueName != null;
    }

    public void setQueueNameIsSet(boolean value) {
      if (!value) {
        this.queueName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((String)value);
        }
        break;

      case QUEUE_NAME:
        if (value == null) {
          unsetQueueName();
        } else {
          setQueueName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_ID:
        return getNodeId();

      case QUEUE_NAME:
        return getQueueName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODE_ID:
        return isSetNodeId();
      case QUEUE_NAME:
        return isSetQueueName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reAssignSlotWhenNoSubscribers_args)
        return this.equals((reAssignSlotWhenNoSubscribers_args)that);
      return false;
    }

    public boolean equals(reAssignSlotWhenNoSubscribers_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeId = true && this.isSetNodeId();
      boolean that_present_nodeId = true && that.isSetNodeId();
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (!this.nodeId.equals(that.nodeId))
          return false;
      }

      boolean this_present_queueName = true && this.isSetQueueName();
      boolean that_present_queueName = true && that.isSetQueueName();
      if (this_present_queueName || that_present_queueName) {
        if (!(this_present_queueName && that_present_queueName))
          return false;
        if (!this.queueName.equals(that.queueName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(reAssignSlotWhenNoSubscribers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      reAssignSlotWhenNoSubscribers_args typedOther = (reAssignSlotWhenNoSubscribers_args)other;

      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(typedOther.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, typedOther.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQueueName()).compareTo(typedOther.isSetQueueName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueueName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueName, typedOther.queueName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NODE_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.nodeId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // QUEUE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.queueName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.nodeId != null) {
        oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
        oprot.writeString(this.nodeId);
        oprot.writeFieldEnd();
      }
      if (this.queueName != null) {
        oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
        oprot.writeString(this.queueName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reAssignSlotWhenNoSubscribers_args(");
      boolean first = true;

      sb.append("nodeId:");
      if (this.nodeId == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("queueName:");
      if (this.queueName == null) {
        sb.append("null");
      } else {
        sb.append(this.queueName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class reAssignSlotWhenNoSubscribers_result implements org.apache.thrift.TBase<reAssignSlotWhenNoSubscribers_result, reAssignSlotWhenNoSubscribers_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reAssignSlotWhenNoSubscribers_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reAssignSlotWhenNoSubscribers_result.class, metaDataMap);
    }

    public reAssignSlotWhenNoSubscribers_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reAssignSlotWhenNoSubscribers_result(reAssignSlotWhenNoSubscribers_result other) {
    }

    public reAssignSlotWhenNoSubscribers_result deepCopy() {
      return new reAssignSlotWhenNoSubscribers_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reAssignSlotWhenNoSubscribers_result)
        return this.equals((reAssignSlotWhenNoSubscribers_result)that);
      return false;
    }

    public boolean equals(reAssignSlotWhenNoSubscribers_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(reAssignSlotWhenNoSubscribers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      reAssignSlotWhenNoSubscribers_result typedOther = (reAssignSlotWhenNoSubscribers_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reAssignSlotWhenNoSubscribers_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class updateCurrentMessageIdForSafeZone_args implements org.apache.thrift.TBase<updateCurrentMessageIdForSafeZone_args, updateCurrentMessageIdForSafeZone_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCurrentMessageIdForSafeZone_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.STRING, (short)2);

    public long messageId; // required
    public String nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE_ID((short)1, "messageId"),
      NODE_ID((short)2, "nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE_ID
            return MESSAGE_ID;
          case 2: // NODE_ID
            return NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MESSAGEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCurrentMessageIdForSafeZone_args.class, metaDataMap);
    }

    public updateCurrentMessageIdForSafeZone_args() {
    }

    public updateCurrentMessageIdForSafeZone_args(
      long messageId,
      String nodeId)
    {
      this();
      this.messageId = messageId;
      setMessageIdIsSet(true);
      this.nodeId = nodeId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCurrentMessageIdForSafeZone_args(updateCurrentMessageIdForSafeZone_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.messageId = other.messageId;
      if (other.isSetNodeId()) {
        this.nodeId = other.nodeId;
      }
    }

    public updateCurrentMessageIdForSafeZone_args deepCopy() {
      return new updateCurrentMessageIdForSafeZone_args(this);
    }

    @Override
    public void clear() {
      setMessageIdIsSet(false);
      this.messageId = 0;
      this.nodeId = null;
    }

    public long getMessageId() {
      return this.messageId;
    }

    public updateCurrentMessageIdForSafeZone_args setMessageId(long messageId) {
      this.messageId = messageId;
      setMessageIdIsSet(true);
      return this;
    }

    public void unsetMessageId() {
      __isset_bit_vector.clear(__MESSAGEID_ISSET_ID);
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
      return __isset_bit_vector.get(__MESSAGEID_ISSET_ID);
    }

    public void setMessageIdIsSet(boolean value) {
      __isset_bit_vector.set(__MESSAGEID_ISSET_ID, value);
    }

    public String getNodeId() {
      return this.nodeId;
    }

    public updateCurrentMessageIdForSafeZone_args setNodeId(String nodeId) {
      this.nodeId = nodeId;
      return this;
    }

    public void unsetNodeId() {
      this.nodeId = null;
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return this.nodeId != null;
    }

    public void setNodeIdIsSet(boolean value) {
      if (!value) {
        this.nodeId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MESSAGE_ID:
        if (value == null) {
          unsetMessageId();
        } else {
          setMessageId((Long)value);
        }
        break;

      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE_ID:
        return Long.valueOf(getMessageId());

      case NODE_ID:
        return getNodeId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE_ID:
        return isSetMessageId();
      case NODE_ID:
        return isSetNodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCurrentMessageIdForSafeZone_args)
        return this.equals((updateCurrentMessageIdForSafeZone_args)that);
      return false;
    }

    public boolean equals(updateCurrentMessageIdForSafeZone_args that) {
      if (that == null)
        return false;

      boolean this_present_messageId = true;
      boolean that_present_messageId = true;
      if (this_present_messageId || that_present_messageId) {
        if (!(this_present_messageId && that_present_messageId))
          return false;
        if (this.messageId != that.messageId)
          return false;
      }

      boolean this_present_nodeId = true && this.isSetNodeId();
      boolean that_present_nodeId = true && that.isSetNodeId();
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (!this.nodeId.equals(that.nodeId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateCurrentMessageIdForSafeZone_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateCurrentMessageIdForSafeZone_args typedOther = (updateCurrentMessageIdForSafeZone_args)other;

      lastComparison = Boolean.valueOf(isSetMessageId()).compareTo(typedOther.isSetMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, typedOther.messageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(typedOther.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, typedOther.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MESSAGE_ID
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.messageId = iprot.readI64();
              setMessageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NODE_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.nodeId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
      oprot.writeI64(this.messageId);
      oprot.writeFieldEnd();
      if (this.nodeId != null) {
        oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
        oprot.writeString(this.nodeId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCurrentMessageIdForSafeZone_args(");
      boolean first = true;

      sb.append("messageId:");
      sb.append(this.messageId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeId:");
      if (this.nodeId == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class updateCurrentMessageIdForSafeZone_result implements org.apache.thrift.TBase<updateCurrentMessageIdForSafeZone_result, updateCurrentMessageIdForSafeZone_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCurrentMessageIdForSafeZone_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCurrentMessageIdForSafeZone_result.class, metaDataMap);
    }

    public updateCurrentMessageIdForSafeZone_result() {
    }

    public updateCurrentMessageIdForSafeZone_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCurrentMessageIdForSafeZone_result(updateCurrentMessageIdForSafeZone_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public updateCurrentMessageIdForSafeZone_result deepCopy() {
      return new updateCurrentMessageIdForSafeZone_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public updateCurrentMessageIdForSafeZone_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCurrentMessageIdForSafeZone_result)
        return this.equals((updateCurrentMessageIdForSafeZone_result)that);
      return false;
    }

    public boolean equals(updateCurrentMessageIdForSafeZone_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateCurrentMessageIdForSafeZone_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateCurrentMessageIdForSafeZone_result typedOther = (updateCurrentMessageIdForSafeZone_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCurrentMessageIdForSafeZone_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class clearAllActiveSlotRelationsToQueue_args implements org.apache.thrift.TBase<clearAllActiveSlotRelationsToQueue_args, clearAllActiveSlotRelationsToQueue_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clearAllActiveSlotRelationsToQueue_args");

    private static final org.apache.thrift.protocol.TField QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queueName", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String queueName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUEUE_NAME((short)1, "queueName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUEUE_NAME
            return QUEUE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("queueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clearAllActiveSlotRelationsToQueue_args.class, metaDataMap);
    }

    public clearAllActiveSlotRelationsToQueue_args() {
    }

    public clearAllActiveSlotRelationsToQueue_args(
      String queueName)
    {
      this();
      this.queueName = queueName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clearAllActiveSlotRelationsToQueue_args(clearAllActiveSlotRelationsToQueue_args other) {
      if (other.isSetQueueName()) {
        this.queueName = other.queueName;
      }
    }

    public clearAllActiveSlotRelationsToQueue_args deepCopy() {
      return new clearAllActiveSlotRelationsToQueue_args(this);
    }

    @Override
    public void clear() {
      this.queueName = null;
    }

    public String getQueueName() {
      return this.queueName;
    }

    public clearAllActiveSlotRelationsToQueue_args setQueueName(String queueName) {
      this.queueName = queueName;
      return this;
    }

    public void unsetQueueName() {
      this.queueName = null;
    }

    /** Returns true if field queueName is set (has been assigned a value) and false otherwise */
    public boolean isSetQueueName() {
      return this.queueName != null;
    }

    public void setQueueNameIsSet(boolean value) {
      if (!value) {
        this.queueName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUEUE_NAME:
        if (value == null) {
          unsetQueueName();
        } else {
          setQueueName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUEUE_NAME:
        return getQueueName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUEUE_NAME:
        return isSetQueueName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clearAllActiveSlotRelationsToQueue_args)
        return this.equals((clearAllActiveSlotRelationsToQueue_args)that);
      return false;
    }

    public boolean equals(clearAllActiveSlotRelationsToQueue_args that) {
      if (that == null)
        return false;

      boolean this_present_queueName = true && this.isSetQueueName();
      boolean that_present_queueName = true && that.isSetQueueName();
      if (this_present_queueName || that_present_queueName) {
        if (!(this_present_queueName && that_present_queueName))
          return false;
        if (!this.queueName.equals(that.queueName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(clearAllActiveSlotRelationsToQueue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      clearAllActiveSlotRelationsToQueue_args typedOther = (clearAllActiveSlotRelationsToQueue_args)other;

      lastComparison = Boolean.valueOf(isSetQueueName()).compareTo(typedOther.isSetQueueName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueueName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueName, typedOther.queueName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // QUEUE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.queueName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.queueName != null) {
        oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
        oprot.writeString(this.queueName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clearAllActiveSlotRelationsToQueue_args(");
      boolean first = true;

      sb.append("queueName:");
      if (this.queueName == null) {
        sb.append("null");
      } else {
        sb.append(this.queueName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class clearAllActiveSlotRelationsToQueue_result implements org.apache.thrift.TBase<clearAllActiveSlotRelationsToQueue_result, clearAllActiveSlotRelationsToQueue_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clearAllActiveSlotRelationsToQueue_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clearAllActiveSlotRelationsToQueue_result.class, metaDataMap);
    }

    public clearAllActiveSlotRelationsToQueue_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clearAllActiveSlotRelationsToQueue_result(clearAllActiveSlotRelationsToQueue_result other) {
    }

    public clearAllActiveSlotRelationsToQueue_result deepCopy() {
      return new clearAllActiveSlotRelationsToQueue_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clearAllActiveSlotRelationsToQueue_result)
        return this.equals((clearAllActiveSlotRelationsToQueue_result)that);
      return false;
    }

    public boolean equals(clearAllActiveSlotRelationsToQueue_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(clearAllActiveSlotRelationsToQueue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      clearAllActiveSlotRelationsToQueue_result typedOther = (clearAllActiveSlotRelationsToQueue_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clearAllActiveSlotRelationsToQueue_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

}
