/*
 * Copyright (c) 2005-2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.wso2.andes.server.slot.thrift.gen;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Auto generated code
 */
public class SlotInfo implements org.apache.thrift.TBase<SlotInfo, SlotInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SlotInfo");

  private static final org.apache.thrift.protocol.TField MESSAGE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("messageCount", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField START_MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("startMessageId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField END_MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("endMessageId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queueName", org.apache.thrift.protocol.TType.STRING, (short)4);

  public long messageCount; // required
  public long startMessageId; // required
  public long endMessageId; // required
  public String queueName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MESSAGE_COUNT((short)1, "messageCount"),
    START_MESSAGE_ID((short)2, "startMessageId"),
    END_MESSAGE_ID((short)3, "endMessageId"),
    QUEUE_NAME((short)4, "queueName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MESSAGE_COUNT
          return MESSAGE_COUNT;
        case 2: // START_MESSAGE_ID
          return START_MESSAGE_ID;
        case 3: // END_MESSAGE_ID
          return END_MESSAGE_ID;
        case 4: // QUEUE_NAME
          return QUEUE_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MESSAGECOUNT_ISSET_ID = 0;
  private static final int __STARTMESSAGEID_ISSET_ID = 1;
  private static final int __ENDMESSAGEID_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MESSAGE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("messageCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.START_MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("startMessageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("endMessageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("queueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SlotInfo.class, metaDataMap);
  }

  public SlotInfo() {
  }

  public SlotInfo(
    long startMessageId,
    long endMessageId,
    String queueName)
  {
    this();
    this.startMessageId = startMessageId;
    setStartMessageIdIsSet(true);
    this.endMessageId = endMessageId;
    setEndMessageIdIsSet(true);
    this.queueName = queueName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SlotInfo(SlotInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.messageCount = other.messageCount;
    this.startMessageId = other.startMessageId;
    this.endMessageId = other.endMessageId;
    if (other.isSetQueueName()) {
      this.queueName = other.queueName;
    }
  }

  public SlotInfo deepCopy() {
    return new SlotInfo(this);
  }

  @Override
  public void clear() {
    setMessageCountIsSet(false);
    this.messageCount = 0;
    setStartMessageIdIsSet(false);
    this.startMessageId = 0;
    setEndMessageIdIsSet(false);
    this.endMessageId = 0;
    this.queueName = null;
  }

  public long getMessageCount() {
    return this.messageCount;
  }

  public SlotInfo setMessageCount(long messageCount) {
    this.messageCount = messageCount;
    setMessageCountIsSet(true);
    return this;
  }

  public void unsetMessageCount() {
    __isset_bit_vector.clear(__MESSAGECOUNT_ISSET_ID);
  }

  /** Returns true if field messageCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageCount() {
    return __isset_bit_vector.get(__MESSAGECOUNT_ISSET_ID);
  }

  public void setMessageCountIsSet(boolean value) {
    __isset_bit_vector.set(__MESSAGECOUNT_ISSET_ID, value);
  }

  public long getStartMessageId() {
    return this.startMessageId;
  }

  public SlotInfo setStartMessageId(long startMessageId) {
    this.startMessageId = startMessageId;
    setStartMessageIdIsSet(true);
    return this;
  }

  public void unsetStartMessageId() {
    __isset_bit_vector.clear(__STARTMESSAGEID_ISSET_ID);
  }

  /** Returns true if field startMessageId is set (has been assigned a value) and false otherwise */
  public boolean isSetStartMessageId() {
    return __isset_bit_vector.get(__STARTMESSAGEID_ISSET_ID);
  }

  public void setStartMessageIdIsSet(boolean value) {
    __isset_bit_vector.set(__STARTMESSAGEID_ISSET_ID, value);
  }

  public long getEndMessageId() {
    return this.endMessageId;
  }

  public SlotInfo setEndMessageId(long endMessageId) {
    this.endMessageId = endMessageId;
    setEndMessageIdIsSet(true);
    return this;
  }

  public void unsetEndMessageId() {
    __isset_bit_vector.clear(__ENDMESSAGEID_ISSET_ID);
  }

  /** Returns true if field endMessageId is set (has been assigned a value) and false otherwise */
  public boolean isSetEndMessageId() {
    return __isset_bit_vector.get(__ENDMESSAGEID_ISSET_ID);
  }

  public void setEndMessageIdIsSet(boolean value) {
    __isset_bit_vector.set(__ENDMESSAGEID_ISSET_ID, value);
  }

  public String getQueueName() {
    return this.queueName;
  }

  public SlotInfo setQueueName(String queueName) {
    this.queueName = queueName;
    return this;
  }

  public void unsetQueueName() {
    this.queueName = null;
  }

  /** Returns true if field queueName is set (has been assigned a value) and false otherwise */
  public boolean isSetQueueName() {
    return this.queueName != null;
  }

  public void setQueueNameIsSet(boolean value) {
    if (!value) {
      this.queueName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MESSAGE_COUNT:
      if (value == null) {
        unsetMessageCount();
      } else {
        setMessageCount((Long)value);
      }
      break;

    case START_MESSAGE_ID:
      if (value == null) {
        unsetStartMessageId();
      } else {
        setStartMessageId((Long)value);
      }
      break;

    case END_MESSAGE_ID:
      if (value == null) {
        unsetEndMessageId();
      } else {
        setEndMessageId((Long)value);
      }
      break;

    case QUEUE_NAME:
      if (value == null) {
        unsetQueueName();
      } else {
        setQueueName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MESSAGE_COUNT:
      return Long.valueOf(getMessageCount());

    case START_MESSAGE_ID:
      return Long.valueOf(getStartMessageId());

    case END_MESSAGE_ID:
      return Long.valueOf(getEndMessageId());

    case QUEUE_NAME:
      return getQueueName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MESSAGE_COUNT:
      return isSetMessageCount();
    case START_MESSAGE_ID:
      return isSetStartMessageId();
    case END_MESSAGE_ID:
      return isSetEndMessageId();
    case QUEUE_NAME:
      return isSetQueueName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SlotInfo)
      return this.equals((SlotInfo)that);
    return false;
  }

  public boolean equals(SlotInfo that) {
    if (that == null)
      return false;

    boolean this_present_messageCount = true && this.isSetMessageCount();
    boolean that_present_messageCount = true && that.isSetMessageCount();
    if (this_present_messageCount || that_present_messageCount) {
      if (!(this_present_messageCount && that_present_messageCount))
        return false;
      if (this.messageCount != that.messageCount)
        return false;
    }

    boolean this_present_startMessageId = true;
    boolean that_present_startMessageId = true;
    if (this_present_startMessageId || that_present_startMessageId) {
      if (!(this_present_startMessageId && that_present_startMessageId))
        return false;
      if (this.startMessageId != that.startMessageId)
        return false;
    }

    boolean this_present_endMessageId = true;
    boolean that_present_endMessageId = true;
    if (this_present_endMessageId || that_present_endMessageId) {
      if (!(this_present_endMessageId && that_present_endMessageId))
        return false;
      if (this.endMessageId != that.endMessageId)
        return false;
    }

    boolean this_present_queueName = true && this.isSetQueueName();
    boolean that_present_queueName = true && that.isSetQueueName();
    if (this_present_queueName || that_present_queueName) {
      if (!(this_present_queueName && that_present_queueName))
        return false;
      if (!this.queueName.equals(that.queueName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SlotInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SlotInfo typedOther = (SlotInfo)other;

    lastComparison = Boolean.valueOf(isSetMessageCount()).compareTo(typedOther.isSetMessageCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageCount, typedOther.messageCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartMessageId()).compareTo(typedOther.isSetStartMessageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartMessageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startMessageId, typedOther.startMessageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndMessageId()).compareTo(typedOther.isSetEndMessageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndMessageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endMessageId, typedOther.endMessageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueueName()).compareTo(typedOther.isSetQueueName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueName, typedOther.queueName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // MESSAGE_COUNT
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.messageCount = iprot.readI64();
            setMessageCountIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // START_MESSAGE_ID
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.startMessageId = iprot.readI64();
            setStartMessageIdIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // END_MESSAGE_ID
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.endMessageId = iprot.readI64();
            setEndMessageIdIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // QUEUE_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.queueName = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (isSetMessageCount()) {
      oprot.writeFieldBegin(MESSAGE_COUNT_FIELD_DESC);
      oprot.writeI64(this.messageCount);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(START_MESSAGE_ID_FIELD_DESC);
    oprot.writeI64(this.startMessageId);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(END_MESSAGE_ID_FIELD_DESC);
    oprot.writeI64(this.endMessageId);
    oprot.writeFieldEnd();
    if (this.queueName != null) {
      oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
      oprot.writeString(this.queueName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SlotInfo(");
    boolean first = true;

    if (isSetMessageCount()) {
      sb.append("messageCount:");
      sb.append(this.messageCount);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("startMessageId:");
    sb.append(this.startMessageId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endMessageId:");
    sb.append(this.endMessageId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queueName:");
    if (this.queueName == null) {
      sb.append("null");
    } else {
      sb.append(this.queueName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

